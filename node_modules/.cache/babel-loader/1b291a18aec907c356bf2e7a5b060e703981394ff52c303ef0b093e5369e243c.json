{"ast":null,"code":"export let TileType;\n\n(function (TileType) {\n  TileType[TileType[\"EMPTY\"] = 0] = \"EMPTY\";\n  TileType[TileType[\"WALL\"] = 1] = \"WALL\";\n  TileType[TileType[\"BREAKABLE\"] = 2] = \"BREAKABLE\";\n  TileType[TileType[\"EXPLOSION\"] = 3] = \"EXPLOSION\";\n  TileType[TileType[\"WATER\"] = 4] = \"WATER\";\n})(TileType || (TileType = {}));\n\nexport const generateMap = (width, height) => {\n  const map = [];\n\n  for (let y = 0; y < height; y++) {\n    const row = [];\n\n    for (let x = 0; x < width; x++) {\n      if (x === 0 || x === width - 1 || y === 0 || y === height - 1) {\n        row.push(TileType.WALL);\n      } else if (x % 2 === 0 && y % 2 === 0) {\n        row.push(TileType.WALL);\n      } else {\n        const random = Math.random();\n\n        if (random < 0.2) {\n          row.push(TileType.BREAKABLE);\n        } else if (random < 0.25) {\n          row.push(TileType.WATER);\n        } else {\n          row.push(TileType.EMPTY);\n        }\n      }\n    }\n\n    map.push(row);\n  }\n\n  map[1][1] = TileType.EMPTY;\n  map[1][2] = TileType.EMPTY;\n  map[2][1] = TileType.EMPTY;\n  return map;\n};\nexport const isWalkable = tile => {\n  return tile === TileType.EMPTY || tile === TileType.WATER;\n};\nexport const explodeBomb = (bomb, state) => {\n  const {\n    x,\n    y,\n    range\n  } = bomb;\n\n  const affectTiles = (tx, ty) => {\n    if (tx >= 0 && tx < state.gameMap.width && ty >= 0 && ty < state.gameMap.height) {\n      const tile = state.gameMap.tiles[ty][tx];\n\n      if (tile === TileType.BREAKABLE) {\n        state.gameMap.tiles[ty][tx] = TileType.EMPTY;\n\n        if (Math.random() < 0.25) {\n          const types = ['bomb', 'range'];\n          const type = types[Math.floor(Math.random() * types.length)];\n          state.powerups.push({\n            x: tx,\n            y: ty,\n            type\n          });\n        }\n      }\n\n      state.explosions.push({\n        x: tx,\n        y: ty,\n        duration: 30\n      });\n    }\n  };\n\n  affectTiles(x, y);\n  const directions = [{\n    dx: 0,\n    dy: -1\n  }, // up\n  {\n    dx: 0,\n    dy: 1\n  }, // down\n  {\n    dx: -1,\n    dy: 0\n  }, // left\n  {\n    dx: 1,\n    dy: 0\n  } // right\n  ];\n\n  for (const dir of directions) {\n    for (let i = 1; i <= range; i++) {\n      const tx = x + dir.dx * i;\n      const ty = y + dir.dy * i;\n      if (tx < 0 || tx >= state.gameMap.width || ty < 0 || ty >= state.gameMap.height) break;\n      const tile = state.gameMap.tiles[ty][tx];\n      if (tile === TileType.WALL || tile === TileType.WATER) break;\n      affectTiles(tx, ty);\n      const chain = state.bombs.find(b => b.x === tx && b.y === ty && b.timer > 0);\n      if (chain) chain.timer = 0;\n\n      if (state.player.alive && (state.player.x === x && state.player.y === y || state.player.x === tx && state.player.y === ty)) {\n        state.player.alive = false;\n        state.gameOver = true;\n      }\n\n      state.enemies.forEach(enemy => {\n        if (enemy.alive && enemy.x === tx && enemy.y === ty) enemy.alive = false;\n      });\n      if (tile === TileType.BREAKABLE) break;\n    }\n  }\n\n  state.player.bombs++;\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/state.ts"],"names":["TileType","generateMap","width","height","map","y","row","x","push","WALL","random","Math","BREAKABLE","WATER","EMPTY","isWalkable","tile","explodeBomb","bomb","state","range","affectTiles","tx","ty","gameMap","tiles","types","type","floor","length","powerups","explosions","duration","directions","dx","dy","dir","i","chain","bombs","find","b","timer","player","alive","gameOver","enemies","forEach","enemy"],"mappings":"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","sourcesContent":["export enum TileType {\n  EMPTY,\n  WALL,\n  BREAKABLE,\n  EXPLOSION,\n  WATER\n}\n\nexport type Player = {\n  x : number\n  y : number\n  alive : boolean\n  bombs : number\n  bombRange : number\n  direction : 'up' | 'down' | 'left' | 'right'\n}\n\nexport type Bomb = {\n  x : number\n  y : number\n  range : number\n  timer : number\n  owner : 'player' | 'enemy'\n}\n\nexport type Explosion = {\n  x : number\n  y : number\n  duration : number\n}\n\nexport type Enemy = {\n  x : number\n  y : number\n  alive : boolean\n  direction : 'up' | 'down' | 'left' | 'right'\n  moveEvery : number\n}\n\nexport type GameMap = {\n  width: number\n  height: number\n  tiles: TileType[][]\n}\n\nexport type PowerUpType = 'bomb' | 'range' | 'speed'\n\nexport type PowerUp = {\n  x : number\n  y : number\n  type : PowerUpType\n}\n\nexport type State = {\n  player: Player\n  bombs: Bomb[]\n  explosions: Explosion[]\n  enemies: Enemy[]\n  gameMap: GameMap\n  gameOver: boolean\n  victory: boolean\n  powerups: PowerUp[]\n}\n\nexport const generateMap = (width: number, height: number): TileType[][] => {\n  const map: TileType[][] = []\n\n  for (let y = 0; y < height; y++) {\n    const row: TileType[] = []\n    for (let x = 0; x < width; x++) {\n      if (x === 0 || x === width - 1 || y === 0 || y === height - 1) {\n        row.push(TileType.WALL)\n      }\n      else if (x % 2 === 0 && y % 2 === 0) {\n        row.push(TileType.WALL)\n      }\n      else{\n        const random = Math.random()\n        if (random < 0.2) {\n          row.push(TileType.BREAKABLE)\n        } else if (random < 0.25) {\n          row.push(TileType.WATER)\n        } else {\n          row.push(TileType.EMPTY)\n        }\n      }\n    }\n    map.push(row)\n  }\n\n  map[1][1] = TileType.EMPTY\n  map[1][2] = TileType.EMPTY\n  map[2][1] = TileType.EMPTY\n\n  return map\n}\n\nexport const isWalkable = (tile: TileType): boolean => {\n  return tile === TileType.EMPTY || tile === TileType.WATER\n}\n\nexport const explodeBomb = (bomb: Bomb, state: State) => {\n  const {x, y, range} = bomb\n  const affectTiles = (tx: number, ty: number) => {\n    if (tx >= 0 && tx < state.gameMap.width && ty >= 0 && ty < state.gameMap.height) {\n      const tile = state.gameMap.tiles[ty][tx]\n      if (tile === TileType.BREAKABLE) {\n        state.gameMap.tiles[ty][tx] = TileType.EMPTY\n        if (Math.random() < 0.25) {\n          const types: PowerUpType[] = ['bomb', 'range']\n          const type = types[Math.floor(Math.random() * types.length)]\n\n          state.powerups.push({ x: tx, y: ty, type })\n        }\n      }\n      state.explosions.push({ x: tx, y: ty, duration: 30 })\n    }\n  }\n\n  affectTiles(x, y)\n  const directions = [\n    { dx: 0, dy: -1 }, // up\n    { dx: 0, dy: 1 }, // down\n    { dx: -1, dy: 0 }, // left\n    { dx: 1, dy: 0 } // right\n  ]\n\n  for (const dir of directions) {\n    for (let i = 1; i <= range; i++) {\n      const tx = x + dir.dx * i\n      const ty = y + dir.dy * i\n      if (tx < 0 || tx >= state.gameMap.width || ty < 0 || ty >= state.gameMap.height) break\n      \n      const tile = state.gameMap.tiles[ty][tx]\n      if (tile === TileType.WALL || tile === TileType.WATER) break\n      affectTiles(tx, ty)\n      const chain = state.bombs.find(b => b.x === tx && b.y === ty && b.timer > 0)\n      if(chain) chain.timer = 0\n      if (state.player.alive && ((state.player.x === x && state.player.y === y) || (state.player.x === tx && state.player.y === ty))) {\n        state.player.alive = false\n        state.gameOver = true\n      }\n      state.enemies.forEach(enemy => {\n        if (enemy.alive && enemy.x === tx && enemy.y === ty) enemy.alive = false\n      })\n      if (tile === TileType.BREAKABLE) break\n    }\n  }\n  state.player.bombs++\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}