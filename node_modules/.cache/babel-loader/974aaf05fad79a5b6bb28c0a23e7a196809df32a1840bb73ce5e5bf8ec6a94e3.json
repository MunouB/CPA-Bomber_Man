{"ast":null,"code":"import * as conf from './conf';\nexport let TileType;\n\n(function (TileType) {\n  TileType[TileType[\"EMPTY\"] = 0] = \"EMPTY\";\n  TileType[TileType[\"WALL\"] = 1] = \"WALL\";\n  TileType[TileType[\"BREAKABLE\"] = 2] = \"BREAKABLE\";\n  TileType[TileType[\"EXPLOSION\"] = 3] = \"EXPLOSION\";\n  TileType[TileType[\"WATER\"] = 4] = \"WATER\";\n})(TileType || (TileType = {}));\n\nexport const generateMap = (width, height) => {\n  const map = [];\n\n  for (let y = 0; y < height; y++) {\n    const row = [];\n\n    for (let x = 0; x < width; x++) {\n      if (x === 0 || x === width - 1 || y === 0 || y === height - 1) {\n        row.push(TileType.WALL);\n      } else if (x % 2 === 0 && y % 2 === 0) {\n        row.push(TileType.WALL);\n      } else {\n        const random = Math.random();\n\n        if (random < conf.BREAKABLEPROBABILITY) {\n          row.push(TileType.BREAKABLE);\n        } else if (random < conf.WATERPROBABILITYAUX) {\n          row.push(TileType.WATER);\n        } else {\n          row.push(TileType.EMPTY);\n        }\n      }\n    }\n\n    map.push(row);\n  }\n\n  map[1][1] = TileType.EMPTY;\n  map[1][2] = TileType.EMPTY;\n  map[2][1] = TileType.EMPTY;\n  return map;\n};\nexport const isWalkable = tile => {\n  return tile === TileType.EMPTY || tile === TileType.WATER;\n};\nexport const explodeBomb = (bomb, state) => {\n  const {\n    x,\n    y,\n    range\n  } = bomb;\n  state.bombs = state.bombs.filter(b => b !== bomb);\n\n  if (bomb.owner === 'player') {\n    state.player.bombs++;\n  }\n\n  const affectTiles = (tx, ty) => {\n    if (tx >= 0 && tx < state.gameMap.width && ty >= 0 && ty < state.gameMap.height) {\n      const tile = state.gameMap.tiles[ty][tx];\n\n      if (tile === TileType.BREAKABLE) {\n        state.gameMap.tiles[ty][tx] = TileType.EMPTY;\n        state.score += conf.BREAKABLESCORE;\n\n        if (Math.random() < 0.25) {\n          const types = ['bomb', 'range', 'freeze'];\n          const type = types[Math.floor(Math.random() * types.length)];\n          state.powerups.push({\n            x: tx,\n            y: ty,\n            type,\n            duration: conf.COUNTDOWN\n          });\n        }\n      }\n\n      const chain = state.bombs.find(b => b.x === tx && b.y === ty);\n\n      if (chain) {\n        explodeBomb(chain, state);\n      }\n\n      state.explosions.push({\n        x: tx,\n        y: ty,\n        duration: 30\n      });\n    }\n  };\n\n  affectTiles(x, y);\n  const directions = [{\n    dx: 0,\n    dy: -1\n  }, // up\n  {\n    dx: 0,\n    dy: 1\n  }, // down\n  {\n    dx: -1,\n    dy: 0\n  }, // left\n  {\n    dx: 1,\n    dy: 0\n  } // right\n  ];\n\n  for (const dir of directions) {\n    for (let i = 1; i <= range; i++) {\n      const tx = x + dir.dx * i;\n      const ty = y + dir.dy * i;\n      if (tx < 0 || tx >= state.gameMap.width || ty < 0 || ty >= state.gameMap.height) break;\n      const tile = state.gameMap.tiles[ty][tx];\n      if (tile === TileType.WALL || tile === TileType.WATER) break;\n      affectTiles(tx, ty);\n\n      if (state.player.alive && (state.player.x === x && state.player.y === y || state.player.x === tx && state.player.y === ty)) {\n        state.player.alive = false;\n        state.gameOver = true;\n      }\n\n      state.enemies.forEach(enemy => {\n        if (enemy.alive && enemy.x === tx && enemy.y === ty) {\n          enemy.alive = false;\n          state.score += 25;\n        }\n      });\n      if (tile === TileType.BREAKABLE) break;\n    }\n  } // state.player.bombs++\n\n};\nexport const createInitialState = () => ({\n  player: {\n    x: 1,\n    y: 1,\n    alive: true,\n    bombs: 1,\n    bombRange: 1,\n    direction: 'right'\n  },\n  bombs: [],\n  explosions: [],\n  enemies: [],\n  gameMap: {\n    width: conf.WIDTH,\n    height: conf.HEIGHT,\n    tiles: generateMap(conf.WIDTH, conf.HEIGHT)\n  },\n  gameOver: false,\n  victory: false,\n  powerups: [],\n  gameStarted: false,\n  level: 1,\n  maxLevel: 10,\n  levelTimer: conf.LEVELTIME,\n  score: 0,\n  paused: false,\n  muted: false,\n  zoom: 1.0\n});","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/CPA-Bomber_Man/src/components/canvas/state.ts"],"names":["conf","TileType","generateMap","width","height","map","y","row","x","push","WALL","random","Math","BREAKABLEPROBABILITY","BREAKABLE","WATERPROBABILITYAUX","WATER","EMPTY","isWalkable","tile","explodeBomb","bomb","state","range","bombs","filter","b","owner","player","affectTiles","tx","ty","gameMap","tiles","score","BREAKABLESCORE","types","type","floor","length","powerups","duration","COUNTDOWN","chain","find","explosions","directions","dx","dy","dir","i","alive","gameOver","enemies","forEach","enemy","createInitialState","bombRange","direction","WIDTH","HEIGHT","victory","gameStarted","level","maxLevel","levelTimer","LEVELTIME","paused","muted","zoom"],"mappings":"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","sourcesContent":["import * as conf from './conf'\n\nexport enum TileType {\n  EMPTY,\n  WALL,\n  BREAKABLE,\n  EXPLOSION,\n  WATER\n}\n\nexport type Player = {\n  x : number\n  y : number\n  alive : boolean\n  bombs : number\n  bombRange : number\n  direction : 'up' | 'down' | 'left' | 'right'\n}\n\nexport type Bomb = {\n  x : number\n  y : number\n  range : number\n  timer : number\n  owner : 'player' | 'enemy'\n}\n\nexport type Explosion = {\n  x : number\n  y : number\n  duration : number\n}\n\nexport type Enemy = {\n  x : number\n  y : number\n  // SMOOTH\n  // pixelX: number\n  // pixelY: number\n  alive : boolean\n  direction : 'up' | 'down' | 'left' | 'right'\n  moveEvery : number\n  aiType?: 'smart' | 'random'\n}\n\nexport type GameMap = {\n  width: number\n  height: number\n  tiles: TileType[][]\n}\n\nexport type PowerUpType = 'bomb' | 'range' | 'freeze'\n\nexport type PowerUp = {\n  x : number\n  y : number\n  type : PowerUpType\n  duration? : number\n}\n\nexport type State = {\n  player: Player\n  bombs: Bomb[]\n  explosions: Explosion[]\n  enemies: Enemy[]\n  gameMap: GameMap\n  gameOver: boolean\n  victory: boolean\n  powerups: PowerUp[]\n  freezeTimer?: number\n  gameStarted : boolean\n  level: number\n  maxLevel: number\n  levelTimer: number\n  score: number\n  paused: boolean\n  muted: boolean\n  zoom: number\n}\n\nexport const generateMap = (width: number, height: number): TileType[][] => {\n  const map: TileType[][] = []\n\n  for (let y = 0; y < height; y++) {\n    const row: TileType[] = []\n    for (let x = 0; x < width; x++) {\n      if (x === 0 || x === width - 1 || y === 0 || y === height - 1) {\n        row.push(TileType.WALL)\n      }\n      else if (x % 2 === 0 && y % 2 === 0) {\n        row.push(TileType.WALL)\n      }\n      else{\n        const random = Math.random()\n        if (random < conf.BREAKABLEPROBABILITY) {\n          row.push(TileType.BREAKABLE)\n        } else if (random < conf.WATERPROBABILITYAUX) {\n          row.push(TileType.WATER)\n        } else {\n          row.push(TileType.EMPTY)\n        }\n      }\n    }\n    map.push(row)\n  }\n\n  map[1][1] = TileType.EMPTY\n  map[1][2] = TileType.EMPTY\n  map[2][1] = TileType.EMPTY\n\n  return map\n}\n\nexport const isWalkable = (tile: TileType): boolean => {\n  return tile === TileType.EMPTY || tile === TileType.WATER\n}\n\nexport const explodeBomb = (bomb: Bomb, state: State) => {\n  const {x, y, range} = bomb\n\n  state.bombs = state.bombs.filter(b => b !== bomb)\n  if (bomb.owner === 'player') {\n    state.player.bombs++\n  }\n  const affectTiles = (tx: number, ty: number) => {\n    if (tx >= 0 && tx < state.gameMap.width && ty >= 0 && ty < state.gameMap.height) {\n      const tile = state.gameMap.tiles[ty][tx]\n      if (tile === TileType.BREAKABLE) {\n        state.gameMap.tiles[ty][tx] = TileType.EMPTY\n        state.score += conf.BREAKABLESCORE\n        if (Math.random() < 0.25) {\n          const types: PowerUpType[] = ['bomb', 'range', 'freeze']\n          const type = types[Math.floor(Math.random() * types.length)]\n\n          state.powerups.push({ x: tx, y: ty, type, duration: conf.COUNTDOWN })\n        }\n      }\n      const chain = state.bombs.find(b => b.x === tx && b.y === ty)\n      if(chain) {\n        explodeBomb(chain,state)\n      }\n      state.explosions.push({ x: tx, y: ty, duration: 30 })\n    }\n  }\n\n  affectTiles(x, y)\n  const directions = [\n    { dx: 0, dy: -1 }, // up\n    { dx: 0, dy: 1 }, // down\n    { dx: -1, dy: 0 }, // left\n    { dx: 1, dy: 0 } // right\n  ]\n\n  for (const dir of directions) {\n    for (let i = 1; i <= range; i++) {\n      const tx = x + dir.dx * i\n      const ty = y + dir.dy * i\n      if (tx < 0 || tx >= state.gameMap.width || ty < 0 || ty >= state.gameMap.height) break\n      \n      const tile = state.gameMap.tiles[ty][tx]\n      if (tile === TileType.WALL || tile === TileType.WATER) break\n      affectTiles(tx, ty)\n      \n      if (state.player.alive && ((state.player.x === x && state.player.y === y) || (state.player.x === tx && state.player.y === ty))) {\n        state.player.alive = false\n        state.gameOver = true\n      }\n      state.enemies.forEach(enemy => {\n        if (enemy.alive && enemy.x === tx && enemy.y === ty) {\n          enemy.alive = false\n          state.score += 25\n        }\n      })\n      if (tile === TileType.BREAKABLE) break\n    }\n  }\n  // state.player.bombs++\n}\n\nexport const createInitialState = ():State => (\n  {\n    player: {\n      x: 1,\n      y: 1,\n      alive: true,\n      bombs: 1,\n      bombRange: 1,\n      direction: 'right',\n    },\n    bombs: [],\n    explosions: [],\n    enemies: [],\n    gameMap: {\n      width: conf.WIDTH,\n      height: conf.HEIGHT,\n      tiles: generateMap(conf.WIDTH, conf.HEIGHT),\n    },\n    gameOver: false,\n    victory: false,\n    powerups: [],\n    gameStarted: false,\n    level: 1,\n    maxLevel: 10,\n    levelTimer: conf.LEVELTIME,\n    score: 0,\n    paused: false,\n    muted: false,\n    zoom: 1.0,\n  }\n)"]},"metadata":{},"sourceType":"module","externalDependencies":[]}