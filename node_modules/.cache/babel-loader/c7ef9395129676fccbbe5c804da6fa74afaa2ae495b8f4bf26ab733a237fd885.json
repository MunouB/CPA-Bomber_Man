{"ast":null,"code":"// Sorbonne Université\n// M1 STL 2024/2025\n// Conception et Pratique de l’Algorithmique\n// Projet final: Refonte d'une application de jeu vidéo\n// ALABDULLAH Muhannad\n// 21317509\n// Ce fichier contient la logique de rendu du jeu\n//\n// Il utilise le contexte de rendu 2D de la balise canvas pour dessiner les éléments du jeu\n//\n// Il utilise également des images pour représenter les différents éléments du jeu\n//\n// Il utilise des constantes pour définir la taille des tuiles, les couleurs du texte, etc.\n//\nimport * as conf from './conf';\nimport { playerSprites } from './images';\nimport * as img from './images';\nimport { TileType } from './state';\nexport const render = ctx => state => {\n  var _state$freezeTimer;\n\n  const tileSize = conf.TILESIZE;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.save(); // Image de fond\n\n  const pattern = ctx.createPattern(img.backgroundImage, 'repeat');\n\n  if (pattern) {\n    ctx.fillStyle = pattern;\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  }\n\n  ctx.scale(state.zoom, state.zoom);\n\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x];\n      const px = x * tileSize;\n      const py = y * tileSize;\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.WATER:\n          ctx.drawImage(img.waterImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EXPLOSION:\n          ctx.drawImage(img.explosionImage, px, py, tileSize, tileSize);\n          break;\n      }\n    }\n  }\n\n  const aliveEnemies = state.enemies.filter(enemy => enemy.alive).length;\n  const pauseIcon = state.paused ? img.continueImage : img.pauseImage;\n  const muteIcon = state.muted ? img.unmuteImage : img.muteImage; // Render HUD\n\n  ctx.drawImage(img.enemyImage, 0, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.levelImage, 0, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupRangeImage, tileSize * 3, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupBombImage, tileSize * 3, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupFreezeImage, tileSize * 6, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.timeImage, tileSize * 6, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.zoomInImage, tileSize * 10, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.zoomOutImage, tileSize * 10, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(pauseIcon, tileSize * 13, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.restartImage, tileSize * 13, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(muteIcon, tileSize * 16, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.scoreImage, tileSize * 16, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.fillStyle = conf.TEXTCOLOR;\n  ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`; // Font source in index.html\n  // Render HUD values\n\n  ctx.fillText(`${aliveEnemies}`, tileSize, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${state.level}`, tileSize, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText(`${state.player.bombRange}`, tileSize * 4, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${state.player.bombs}`, tileSize * 4, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText(`${Math.ceil(((_state$freezeTimer = state.freezeTimer) !== null && _state$freezeTimer !== void 0 ? _state$freezeTimer : 0) / 60)}s`, tileSize * 7, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${Math.ceil(state.levelTimer / 60)}s`, tileSize * 7, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText('+', tileSize * 11, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText('-', tileSize * 11, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText('P', tileSize * 14, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText('R', tileSize * 14, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText('M', tileSize * 17, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${state.score}`, tileSize * 17, (conf.HEIGHT + 1.75) * tileSize); // Render player\n\n  const playerImg = playerSprites[state.player.direction];\n\n  if (playerImg.complete) {\n    ctx.drawImage(playerImg, state.player.x * tileSize, state.player.y * tileSize, tileSize, tileSize);\n  } // Render bombs\n\n\n  state.bombs.forEach(bomb => {\n    ctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize);\n  }); // Render explosions\n\n  state.explosions.forEach(explosion => {\n    ctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize);\n  }); // Render enemies\n\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return;\n    ctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize);\n  }); // Render PowerUps\n\n  state.powerups.forEach(p => {\n    const powerupIcon = p.type === 'bomb' ? img.powerupBombImage : p.type === 'range' ? img.powerupRangeImage : img.powerupFreezeImage;\n    const isBlinking = p.duration !== undefined && p.duration < conf.BLINKDURATION;\n    const visible = !isBlinking || Math.floor(p.duration / conf.BLINKFRAME) % 2 === 0;\n    if (visible) ctx.drawImage(powerupIcon, p.x * tileSize, p.y * tileSize, tileSize, tileSize);\n  }); // Render Floating texts\n\n  state.floatingTexts.forEach(text => {\n    ctx.fillStyle = `rgba(150,75,0,${text.duration / conf.FLOATTEXTDURATION})`; // Fade out\n\n    ctx.fillText(text.value, text.x + conf.TILESIZE / 2, text.y);\n  }); // Render Game state\n\n  if (state.paused) {\n    ctx.fillText('Game Paused', tileSize * 21.5, (conf.HEIGHT + 0.75) * tileSize);\n    ctx.fillText('Press P to continue', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize);\n  }\n\n  if (state.gameOver) {\n    ctx.fillText('Game Over', tileSize * 22.5, (conf.HEIGHT + 0.75) * tileSize);\n    ctx.fillText('Press R to restart', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize);\n  }\n\n  if (!state.gameStarted) {\n    ctx.font = `${Math.floor(tileSize * 0.4)}px 'Press Start 2P'`;\n    ctx.fillText('Press any key to start', tileSize * 20, (conf.HEIGHT + 1.25) * tileSize);\n    ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`;\n    return;\n  }\n\n  if (state.victory) {\n    ctx.fillText('YOU WIN', tileSize * 23.5, (conf.HEIGHT + 0.75) * tileSize);\n    ctx.font = `${Math.floor(tileSize * 0.4)}px 'Press Start 2P'`;\n    ctx.fillText('Press any key to continue', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize);\n    ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`;\n  }\n\n  ctx.restore();\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/CPA-Bomber_Man/src/components/canvas/renderer.ts"],"names":["conf","playerSprites","img","TileType","render","ctx","state","tileSize","TILESIZE","clearRect","canvas","width","height","save","pattern","createPattern","backgroundImage","fillStyle","fillRect","scale","zoom","y","gameMap","x","tile","tiles","px","py","WALL","drawImage","wallImage","BREAKABLE","breakableImage","WATER","waterImage","EXPLOSION","explosionImage","aliveEnemies","enemies","filter","enemy","alive","length","pauseIcon","paused","continueImage","pauseImage","muteIcon","muted","unmuteImage","muteImage","enemyImage","HEIGHT","levelImage","powerupRangeImage","powerupBombImage","powerupFreezeImage","timeImage","zoomInImage","zoomOutImage","restartImage","scoreImage","TEXTCOLOR","font","Math","floor","fillText","level","player","bombRange","bombs","ceil","freezeTimer","levelTimer","score","playerImg","direction","complete","forEach","bomb","bombImage","explosions","explosion","powerups","p","powerupIcon","type","isBlinking","duration","undefined","BLINKDURATION","visible","BLINKFRAME","floatingTexts","text","FLOATTEXTDURATION","value","gameOver","gameStarted","victory","restore"],"mappings":"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","sourcesContent":["// Sorbonne Université\n// M1 STL 2024/2025\n// Conception et Pratique de l’Algorithmique\n// Projet final: Refonte d'une application de jeu vidéo\n// ALABDULLAH Muhannad\n// 21317509\n\n// Ce fichier contient la logique de rendu du jeu\n//\n// Il utilise le contexte de rendu 2D de la balise canvas pour dessiner les éléments du jeu\n//\n// Il utilise également des images pour représenter les différents éléments du jeu\n//\n// Il utilise des constantes pour définir la taille des tuiles, les couleurs du texte, etc.\n//\n\nimport * as conf from './conf'\nimport { playerSprites } from './images'\nimport * as img from './images'\nimport { TileType, State } from './state'\n\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n\tconst tileSize = conf.TILESIZE\n\tctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n\tctx.save()\n\n\t// Image de fond\n\tconst pattern = ctx.createPattern(img.backgroundImage, 'repeat')\n\tif (pattern) {\n\t\tctx.fillStyle = pattern\n\t\tctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\t}\n\tctx.scale(state.zoom, state.zoom)\n\t\n\tfor (let y = 0; y < state.gameMap.height; y++) {\n\t\tfor (let x = 0; x < state.gameMap.width; x++) {\n\t\t\tconst tile = state.gameMap.tiles[y][x]\n\n\t\t\tconst px = x * tileSize\n\t\t\tconst py = y * tileSize\n\n\t\t\tswitch (tile) {\n\t\t\t\tcase TileType.WALL:\n\t\t\t\t\tctx.drawImage(img.wallImage, px, py, tileSize, tileSize)\n\t\t\t\t\tbreak\n\t\t\t\tcase TileType.BREAKABLE:\n\t\t\t\t\tctx.drawImage(img.breakableImage, px, py, tileSize, tileSize)\n\t\t\t\t\tbreak\n\t\t\t\tcase TileType.WATER:\n\t\t\t\t\tctx.drawImage(img.waterImage, px, py, tileSize, tileSize)\n\t\t\t\t\tbreak\n\t\t\t\tcase TileType.EXPLOSION:\n\t\t\t\t\tctx.drawImage(img.explosionImage, px, py, tileSize, tileSize)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tconst aliveEnemies = state.enemies.filter(enemy => enemy.alive).length\n\tconst pauseIcon = state.paused ? img.continueImage : img.pauseImage\n\tconst muteIcon = state.muted ? img.unmuteImage : img.muteImage\n\n\t// Render HUD\n\tctx.drawImage(img.enemyImage, 0, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n\tctx.drawImage(img.levelImage, 0, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n\tctx.drawImage(img.powerupRangeImage, tileSize * 3, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n\tctx.drawImage(img.powerupBombImage, tileSize * 3, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n\tctx.drawImage(img.powerupFreezeImage, tileSize * 6, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n\tctx.drawImage(img.timeImage, tileSize * 6, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n\tctx.drawImage(img.zoomInImage, tileSize * 10, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n\tctx.drawImage(img.zoomOutImage, tileSize * 10, (conf.HEIGHT+1) * tileSize, tileSize, tileSize)\n\tctx.drawImage(pauseIcon, tileSize * 13, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n\tctx.drawImage(img.restartImage, tileSize * 13, (conf.HEIGHT+1) * tileSize, tileSize, tileSize)\n\tctx.drawImage(muteIcon, tileSize * 16, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n\tctx.drawImage(img.scoreImage, tileSize * 16, (conf.HEIGHT+1) * tileSize, tileSize, tileSize)\n\t\n\tctx.fillStyle = conf.TEXTCOLOR\n\tctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'` // Font source in index.html\n\n\t// Render HUD values\n\tctx.fillText(`${aliveEnemies}`, tileSize, (conf.HEIGHT + 0.75) * tileSize)\n\tctx.fillText(`${state.level}`, tileSize, (conf.HEIGHT + 1.75) * tileSize)\n\tctx.fillText(`${state.player.bombRange}`, tileSize * 4, (conf.HEIGHT + 0.75) * tileSize)\n\tctx.fillText(`${state.player.bombs}`, tileSize * 4, (conf.HEIGHT + 1.75) * tileSize)\n\tctx.fillText(`${Math.ceil((state.freezeTimer ?? 0) / 60)}s`, tileSize * 7, (conf.HEIGHT + 0.75) * tileSize)\n\tctx.fillText(`${Math.ceil(state.levelTimer / 60)}s`, tileSize * 7, (conf.HEIGHT + 1.75) * tileSize)\n\tctx.fillText('+', tileSize * 11, (conf.HEIGHT + 0.75) * tileSize)\n\tctx.fillText('-', tileSize * 11, (conf.HEIGHT + 1.75) * tileSize)\n\tctx.fillText('P', tileSize * 14, (conf.HEIGHT + 0.75) * tileSize)\n\tctx.fillText('R', tileSize * 14, (conf.HEIGHT + 1.75) * tileSize)\n\tctx.fillText('M', tileSize * 17, (conf.HEIGHT + 0.75) * tileSize)\n\tctx.fillText(`${state.score}`, tileSize * 17, (conf.HEIGHT + 1.75) * tileSize)\n\n\t// Render player\n\tconst playerImg = playerSprites[state.player.direction]\n\tif (playerImg.complete) {\n\t\tctx.drawImage(\n\t\t\tplayerImg,\n\t\t\tstate.player.x * tileSize,\n\t\t\tstate.player.y * tileSize,\n\t\t\ttileSize,\n\t\t\ttileSize\n\t\t)\n\t}\n\n\t// Render bombs\n\tstate.bombs.forEach(bomb => {\n\t\tctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize)\n\t})\n\t// Render explosions\n\tstate.explosions.forEach(explosion => {\n\t\tctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize)\n\t\t\n\t})\n\t// Render enemies\n\tstate.enemies.forEach(enemy => {\n\t\tif (!enemy.alive) return\n\t\tctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize)\n\t})\n\t// Render PowerUps\n\tstate.powerups.forEach(p => {\n\t\tconst powerupIcon = p.type === 'bomb' ? img.powerupBombImage : (p.type === 'range' ? img.powerupRangeImage : img.powerupFreezeImage)\n\t\t\n\t\tconst isBlinking = p.duration !== undefined && p.duration < conf.BLINKDURATION\n\t\tconst visible = !isBlinking || Math.floor(p.duration! / conf.BLINKFRAME) % 2 === 0\n\t\tif (visible) ctx.drawImage(powerupIcon, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n\t})\n\n\t// Render Floating texts\n\tstate.floatingTexts.forEach(text => {\n\t\tctx.fillStyle = `rgba(150,75,0,${text.duration / conf.FLOATTEXTDURATION})` // Fade out\n\t\tctx.fillText(text.value, text.x + conf.TILESIZE / 2, text.y)\n\t})\n\n\t// Render Game state\n\n\tif (state.paused){\n\t\tctx.fillText('Game Paused', tileSize * 21.5, (conf.HEIGHT + 0.75) * tileSize)\n\t\tctx.fillText('Press P to continue', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize)\n\t}\n\tif (state.gameOver) {\n\t\tctx.fillText('Game Over', tileSize * 22.5, (conf.HEIGHT + 0.75) * tileSize)\n\t\tctx.fillText('Press R to restart', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize)\n\t}\n\tif (!state.gameStarted){\n\t\tctx.font = `${Math.floor(tileSize * 0.4)}px 'Press Start 2P'`\n\t\tctx.fillText('Press any key to start', tileSize * 20, (conf.HEIGHT + 1.25) * tileSize)\n\t\tctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`\n\t\treturn\n\t}\n\tif (state.victory) {\n\t\tctx.fillText('YOU WIN', tileSize * 23.5, (conf.HEIGHT + 0.75) * tileSize)\n\t\tctx.font = `${Math.floor(tileSize * 0.4)}px 'Press Start 2P'`\n\t\tctx.fillText('Press any key to continue', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize)\n\t\tctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`\n\t}\n\n\tctx.restore()\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}