{"ast":null,"code":"export let TileType;\n\n(function (TileType) {\n  TileType[TileType[\"EMPTY\"] = 0] = \"EMPTY\";\n  TileType[TileType[\"WALL\"] = 1] = \"WALL\";\n  TileType[TileType[\"BREAKABLE\"] = 2] = \"BREAKABLE\";\n  TileType[TileType[\"EXPLOSION\"] = 3] = \"EXPLOSION\";\n  TileType[TileType[\"WATER\"] = 4] = \"WATER\";\n})(TileType || (TileType = {}));\n\nexport const generateMap = (width, height) => {\n  const map = [];\n\n  for (let y = 0; y < height; y++) {\n    const row = [];\n\n    for (let x = 0; x < width; x++) {\n      if (x === 0 || x === width - 1 || y === 0 || y === height - 1) {\n        row.push(TileType.WALL);\n      } else if (x % 2 === 0 && y % 2 === 0) {\n        row.push(TileType.WALL);\n      } else {\n        const random = Math.random();\n\n        if (random < 0.2) {\n          row.push(TileType.BREAKABLE);\n        } else if (random < 0.25) {\n          row.push(TileType.WATER);\n        } else {\n          row.push(TileType.EMPTY);\n        }\n      }\n    }\n\n    map.push(row);\n  }\n\n  map[1][1] = TileType.EMPTY;\n  map[1][2] = TileType.EMPTY;\n  map[2][1] = TileType.EMPTY;\n  return map;\n};\nexport const isWalkable = tile => {\n  return tile === TileType.EMPTY || tile === TileType.WATER;\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/state.ts"],"names":["TileType","generateMap","width","height","map","y","row","x","push","WALL","random","Math","BREAKABLE","WATER","EMPTY","isWalkable","tile"],"mappings":"AAEA,WAAYA,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;GAAAA,Q,KAAAA,Q;;AAsDZ,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAgBC,MAAhB,KAAiD;AAC1E,QAAMC,GAAiB,GAAG,EAA1B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,EAA7B,EAAiC;AAC/B,UAAMC,GAAe,GAAG,EAAxB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAApB,EAA2BK,CAAC,EAA5B,EAAgC;AAC9B,UAAIA,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAKL,KAAK,GAAG,CAAzB,IAA8BG,CAAC,KAAK,CAApC,IAAyCA,CAAC,KAAKF,MAAM,GAAG,CAA5D,EAA+D;AAC7DG,QAAAA,GAAG,CAACE,IAAJ,CAASR,QAAQ,CAACS,IAAlB;AACD,OAFD,MAGK,IAAIF,CAAC,GAAG,CAAJ,KAAU,CAAV,IAAeF,CAAC,GAAG,CAAJ,KAAU,CAA7B,EAAgC;AACnCC,QAAAA,GAAG,CAACE,IAAJ,CAASR,QAAQ,CAACS,IAAlB;AACD,OAFI,MAGD;AACF,cAAMC,MAAM,GAAGC,IAAI,CAACD,MAAL,EAAf;;AACA,YAAIA,MAAM,GAAG,GAAb,EAAkB;AAChBJ,UAAAA,GAAG,CAACE,IAAJ,CAASR,QAAQ,CAACY,SAAlB;AACD,SAFD,MAEO,IAAIF,MAAM,GAAG,IAAb,EAAmB;AACxBJ,UAAAA,GAAG,CAACE,IAAJ,CAASR,QAAQ,CAACa,KAAlB;AACD,SAFM,MAEA;AACLP,UAAAA,GAAG,CAACE,IAAJ,CAASR,QAAQ,CAACc,KAAlB;AACD;AACF;AACF;;AACDV,IAAAA,GAAG,CAACI,IAAJ,CAASF,GAAT;AACD;;AAEDF,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYJ,QAAQ,CAACc,KAArB;AACAV,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYJ,QAAQ,CAACc,KAArB;AACAV,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYJ,QAAQ,CAACc,KAArB;AAEA,SAAOV,GAAP;AACD,CA/BM;AAiCP,OAAO,MAAMW,UAAU,GAAIC,IAAD,IAA6B;AACrD,SAAOA,IAAI,KAAKhB,QAAQ,CAACc,KAAlB,IAA2BE,IAAI,KAAKhB,QAAQ,CAACa,KAApD;AACD,CAFM","sourcesContent":["import * as conf from './conf'\n\nexport enum TileType {\n  EMPTY,\n  WALL,\n  BREAKABLE,\n  EXPLOSION,\n  WATER\n}\n\nexport type Player = {\n  x : number\n  y : number\n  alive : boolean\n  bombs : number\n  bombRange : number\n  direction : 'up' | 'down' | 'left' | 'right'\n}\n\nexport type Bomb = {\n  x : number\n  y : number\n  range : number\n  timer : number\n  owner : number\n}\n\nexport type Explosion = {\n  x : number\n  y : number\n  duration : number\n}\n\nexport type Enemy = {\n  x : number\n  y : number\n  alive : boolean\n  direction : 'up' | 'down' | 'left' | 'right'\n}\n\nexport type GameMap = {\n  width: number\n  height: number\n  tiles: TileType[][]\n}\n\nexport type State = {\n  player: Player\n  bombs: Bomb[]\n  explosions: Explosion[]\n  enemies: Enemy[]\n  gameMap: GameMap\n  gameOver: boolean\n  victory: boolean\n}\n\nexport const generateMap = (width: number, height: number): TileType[][] => {\n  const map: TileType[][] = []\n\n  for (let y = 0; y < height; y++) {\n    const row: TileType[] = []\n    for (let x = 0; x < width; x++) {\n      if (x === 0 || x === width - 1 || y === 0 || y === height - 1) {\n        row.push(TileType.WALL)\n      }\n      else if (x % 2 === 0 && y % 2 === 0) {\n        row.push(TileType.WALL)\n      }\n      else{\n        const random = Math.random()\n        if (random < 0.2) {\n          row.push(TileType.BREAKABLE)\n        } else if (random < 0.25) {\n          row.push(TileType.WATER)\n        } else {\n          row.push(TileType.EMPTY)\n        }\n      }\n    }\n    map.push(row)\n  }\n\n  map[1][1] = TileType.EMPTY\n  map[1][2] = TileType.EMPTY\n  map[2][1] = TileType.EMPTY\n\n  return map\n}\n\nexport const isWalkable = (tile: TileType): boolean => {\n  return tile === TileType.EMPTY || tile === TileType.WATER\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}