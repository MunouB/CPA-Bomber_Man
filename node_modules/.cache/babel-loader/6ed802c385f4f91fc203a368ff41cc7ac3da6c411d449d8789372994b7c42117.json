{"ast":null,"code":"import { TileType } from './state';\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#00ff00',\n  BLUE: '#0000ff'\n};\nexport const render = ctx => state => {\n  const tileSize = 40;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x];\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.fillStyle = 'black';\n          break;\n\n        case TileType.BREAKABLE:\n          ctx.fillStyle = 'brown';\n          break;\n\n        case TileType.WATER:\n          ctx.fillStyle = 'blue';\n          break;\n\n        case TileType.EMPTY:\n          ctx.fillStyle = 'white';\n          break;\n\n        case TileType.EXPLOSION:\n          ctx.fillStyle = 'red';\n          break;\n      }\n\n      ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);\n    }\n  }\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/renderer.ts"],"names":["TileType","COLORS","RED","GREEN","BLUE","render","ctx","state","tileSize","clearRect","canvas","width","height","y","gameMap","x","tile","tiles","WALL","fillStyle","BREAKABLE","WATER","EMPTY","EXPLOSION","fillRect"],"mappings":"AACA,SAASA,QAAT,QAAgC,SAAhC;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,SADQ;AAEbC,EAAAA,KAAK,EAAE,SAFM;AAGbC,EAAAA,IAAI,EAAE;AAHO,CAAf;AAMA,OAAO,MAAMC,MAAM,GAAIC,GAAD,IAAoCC,KAAD,IAAkB;AACzE,QAAMC,QAAQ,GAAG,EAAjB;AACAF,EAAAA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBH,GAAG,CAACI,MAAJ,CAAWC,KAA/B,EAAsCL,GAAG,CAACI,MAAJ,CAAWE,MAAjD;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,OAAN,CAAcF,MAAlC,EAA0CC,CAAC,EAA3C,EAA+C;AAC7C,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACO,OAAN,CAAcH,KAAlC,EAAyCI,CAAC,EAA1C,EAA8C;AAC5C,YAAMC,IAAI,GAAGT,KAAK,CAACO,OAAN,CAAcG,KAAd,CAAoBJ,CAApB,EAAuBE,CAAvB,CAAb;;AAEA,cAAQC,IAAR;AACE,aAAKhB,QAAQ,CAACkB,IAAd;AACEZ,UAAAA,GAAG,CAACa,SAAJ,GAAgB,OAAhB;AACA;;AACF,aAAKnB,QAAQ,CAACoB,SAAd;AACEd,UAAAA,GAAG,CAACa,SAAJ,GAAgB,OAAhB;AACA;;AACF,aAAKnB,QAAQ,CAACqB,KAAd;AACEf,UAAAA,GAAG,CAACa,SAAJ,GAAgB,MAAhB;AACA;;AACF,aAAKnB,QAAQ,CAACsB,KAAd;AACEhB,UAAAA,GAAG,CAACa,SAAJ,GAAgB,OAAhB;AACA;;AACF,aAAKnB,QAAQ,CAACuB,SAAd;AACEjB,UAAAA,GAAG,CAACa,SAAJ,GAAgB,KAAhB;AACA;AAfJ;;AAiBAb,MAAAA,GAAG,CAACkB,QAAJ,CAAaT,CAAC,GAAGP,QAAjB,EAA2BK,CAAC,GAAGL,QAA/B,EAAyCA,QAAzC,EAAmDA,QAAnD;AACD;AACF;AACF,CA3BM","sourcesContent":["import * as conf from './conf'\nimport { TileType, State } from './state'\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#00ff00',\n  BLUE: '#0000ff',\n}\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  const tileSize = 40\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x]\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.fillStyle = 'black'\n          break\n        case TileType.BREAKABLE:\n          ctx.fillStyle = 'brown'\n          break\n        case TileType.WATER:\n          ctx.fillStyle = 'blue'\n          break\n        case TileType.EMPTY:\n          ctx.fillStyle = 'white'\n          break\n        case TileType.EXPLOSION:\n          ctx.fillStyle = 'red'\n          break\n      }\n      ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize)\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}