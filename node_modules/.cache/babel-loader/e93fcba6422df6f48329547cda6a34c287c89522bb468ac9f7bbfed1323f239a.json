{"ast":null,"code":"var _jsxFileName = \"/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as conf from './conf';\nimport { useEffect, useRef } from 'react';\nimport { generateMap, isWalkable, TileType, explodeBomb } from './state';\nimport { render } from './renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(() => iterate(ctx));\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const initialState = {\n    player: {\n      x: 1,\n      y: 1,\n      alive: true,\n      bombs: 1,\n      bombRange: 1,\n      direction: 'right'\n    },\n    bombs: [],\n    explosions: [],\n    enemies: [],\n    gameMap: {\n      width: conf.WIDTH,\n      height: conf.HEIGHT,\n      tiles: generateMap(conf.WIDTH, conf.HEIGHT)\n    },\n    gameOver: false,\n    victory: false,\n    powerups: [],\n    gameStarted: false,\n    level: 1,\n    maxLevel: 10,\n    levelTimer: conf.LEVELTIME,\n    score: 0\n  };\n  const ref = useRef();\n  const state = useRef(initialState);\n\n  const advanceToNextLevel = () => {\n    const nextLevel = state.current.level + 1;\n\n    if (nextLevel > state.current.maxLevel) {\n      state.current.gameOver = true;\n      return;\n    }\n\n    state.current.level = nextLevel;\n    state.current.victory = false;\n    state.current.levelTimer = conf.LEVELTIME + (nextLevel - 1) * conf.ADDITIONALTIME; // Re-generate the map\n\n    state.current.gameMap.tiles = generateMap(state.current.gameMap.width, state.current.gameMap.height); // Reset player\n\n    state.current.player.x = 1;\n    state.current.player.y = 1;\n    state.current.player.alive = true;\n    state.current.player.bombs = 1;\n    state.current.player.bombRange = 2; // Reset enemies (increase with level)\n\n    const enemyCount = conf.ENEMIES + (nextLevel - 1) * conf.ADDITIONALENEMIES;\n    const enemies = [];\n\n    while (enemies.length < enemyCount) {\n      const x = Math.floor(Math.random() * state.current.gameMap.width);\n      const y = Math.floor(Math.random() * state.current.gameMap.height);\n      const tile = state.current.gameMap.tiles[y][x];\n\n      if (tile === TileType.EMPTY && x >= 5 && y >= 5) {\n        enemies.push({\n          x,\n          y,\n          direction: 'up',\n          alive: true,\n          moveEvery: 0\n        });\n      }\n    }\n\n    state.current.enemies = enemies; // Reset powerups, bombs, explosions\n\n    state.current.bombs = [];\n    state.current.explosions = [];\n    state.current.powerups = [];\n  };\n\n  const handleKeyDown = e => {\n    if (!state.current.gameStarted) {\n      state.current.gameStarted = true;\n      const enemyCount = conf.ENEMIES;\n      const enemies = [];\n\n      while (enemies.length < enemyCount) {\n        const x = Math.floor(Math.random() * state.current.gameMap.width);\n        const y = Math.floor(Math.random() * state.current.gameMap.height);\n        const tile = state.current.gameMap.tiles[y][x];\n\n        if (tile === TileType.EMPTY && x >= 5 && y >= 5) {\n          enemies.push({\n            x,\n            y,\n            direction: 'up',\n            alive: true,\n            moveEvery: 0\n          });\n        }\n      }\n\n      state.current.enemies = enemies;\n      return;\n    }\n\n    if (state.current.victory) {\n      advanceToNextLevel();\n      return;\n    }\n\n    if (state.current.gameOver) return;\n    const {\n      x,\n      y\n    } = state.current.player;\n    let newX = x;\n    let newY = y;\n\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up';\n        newY--;\n        break;\n\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down';\n        newY++;\n        break;\n\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left';\n        newX--;\n        break;\n\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right';\n        newX++;\n        break;\n\n      case ' ':\n      case 'Enter':\n        {\n          const {\n            x,\n            y,\n            bombs\n          } = state.current.player;\n          const tile = state.current.gameMap.tiles[y][x];\n          const alreadyExists = state.current.bombs.some(b => b.x === x && b.y === y);\n\n          if (tile !== TileType.WALL && tile !== TileType.WATER && !alreadyExists && bombs > 0) {\n            state.current.bombs.push({\n              x,\n              y,\n              range: state.current.player.bombRange,\n              timer: conf.BOMBTIME,\n              owner: 'player'\n            });\n            state.current.player.bombs--;\n          }\n\n          break;\n        }\n    }\n\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX];\n      const isBombThere = state.current.bombs.some(b => b.x === newX && b.y === newY);\n      const isStandingOnBomb = state.current.bombs.some(b => b.x === x && b.y === y);\n      if (isBombThere && !isStandingOnBomb) return;\n\n      if (isWalkable(tile)) {\n        state.current.player.x = newX;\n        state.current.player.y = newY;\n      }\n    }\n  };\n\n  const iterate = ctx => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    if (state.current.gameStarted && !state.current.gameOver && !state.current.victory) {\n      state.current.levelTimer--;\n\n      if (state.current.levelTimer <= 0) {\n        state.current.gameOver = true;\n      }\n    } // const explodedBombs = state.current.bombs.filter(bomb => bomb.timer <= 0)\n    // explodedBombs.forEach(bomb => {\n    //   explodeBomb(bomb, state.current)\n    // })\n    // state.current.bombs = state.current.bombs.filter(bomb => bomb.timer > 0)\n\n\n    state.current.bombs.forEach(bomb => bomb.timer--);\n    const toExplode = state.current.bombs.filter(b => b.timer <= 0);\n    state.current.bombs.forEach(b => {\n      if (b.timer > 0) b.timer--;\n      if (b.timer === 0) toExplode.push(b);\n    });\n    state.current.bombs = state.current.bombs.filter(b => !toExplode.includes(b));\n    toExplode.forEach(b => explodeBomb(b, state.current));\n    state.current.explosions = state.current.explosions.filter(e => {\n      e.duration--;\n      return e.duration > 0;\n    });\n    if (state.current.freezeTimer && state.current.freezeTimer > 0) state.current.freezeTimer--;\n\n    const tryMoveEnemy = enemy => {\n      if (!state.current.gameStarted) return;\n      if (state.current.freezeTimer && state.current.freezeTimer > 0) return;\n\n      if (enemy.moveEvery > 0) {\n        enemy.moveEvery--;\n        return;\n      }\n\n      const {\n        x,\n        y\n      } = enemy;\n      const directions = ['up', 'down', 'left', 'right'];\n      const preferredDirs = [enemy.direction, ...directions.filter(d => d !== enemy.direction)];\n      let moved = false;\n\n      for (const dir of preferredDirs) {\n        let newX = x;\n        let newY = y;\n\n        switch (dir) {\n          case 'up':\n            newY--;\n            break;\n\n          case 'down':\n            newY++;\n            break;\n\n          case 'left':\n            newX--;\n            break;\n\n          case 'right':\n            newX++;\n            break;\n        }\n\n        const isInBounds = newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height;\n        const tile = isInBounds ? state.current.gameMap.tiles[newY][newX] : TileType.WALL;\n        const isBlocked = !isWalkable(tile) || state.current.bombs.some(b => b.x === newX && b.y === newY);\n\n        if (!isBlocked) {\n          enemy.x = newX;\n          enemy.y = newY;\n          enemy.direction = dir;\n          moved = true;\n          break;\n        }\n      }\n\n      if (!moved && Math.random() < 0.2) {\n        const dirs = ['up', 'down', 'left', 'right'];\n        enemy.direction = dirs[Math.floor(Math.random() * dirs.length)];\n      }\n\n      enemy.moveEvery = 60;\n    };\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive) tryMoveEnemy(enemy);\n    });\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive && state.current.player.alive && state.current.player.x === enemy.x && state.current.player.y === enemy.y) {\n        state.current.player.alive = false;\n        state.current.gameOver = true;\n      }\n    });\n    state.current.powerups = state.current.powerups.filter(p => {\n      if (p.x === state.current.player.x && p.y === state.current.player.y) {\n        if (p.type === 'bomb') state.current.player.bombs++;\n        if (p.type === 'range') state.current.player.bombRange++;\n        if (p.type === 'freeze') state.current.freezeTimer = 300;\n        state.current.score = +20;\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!state.current.victory && state.current.enemies.length > 0 && state.current.enemies.every(e => !e.alive)) {\n      state.current.victory = true;\n      state.current.score += state.current.levelTimer;\n    } // Render the game state\n\n\n    render(ctx)(state.current);\n    requestAnimationFrame(() => iterate(ctx));\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current);\n      window.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"Gpm0P4FfDB25XYapIJctmdb7SaA=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx"],"names":["conf","useEffect","useRef","generateMap","isWalkable","TileType","explodeBomb","render","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","initialState","player","x","y","alive","bombs","bombRange","direction","explosions","enemies","gameMap","WIDTH","HEIGHT","tiles","gameOver","victory","powerups","gameStarted","level","maxLevel","levelTimer","LEVELTIME","score","ref","state","advanceToNextLevel","nextLevel","current","ADDITIONALTIME","enemyCount","ENEMIES","ADDITIONALENEMIES","length","Math","floor","random","tile","EMPTY","push","moveEvery","handleKeyDown","e","newX","newY","key","alreadyExists","some","b","WALL","WATER","range","timer","BOMBTIME","owner","isBombThere","isStandingOnBomb","clearRect","forEach","bomb","toExplode","filter","includes","duration","freezeTimer","tryMoveEnemy","enemy","directions","preferredDirs","d","moved","dir","isInBounds","isBlocked","dirs","p","type","every","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { useEffect, useRef } from 'react'\nimport { generateMap, isWalkable, State, TileType, explodeBomb, Enemy} from './state'\nimport { render } from './renderer'\nimport { Dirent } from 'fs'\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = {\n    player: {\n      x: 1,\n      y: 1,\n      alive: true,\n      bombs: 1,\n      bombRange: 1,\n      direction: 'right'\n    },\n    bombs: [],\n    explosions: [],\n    enemies: [],\n    gameMap: {\n      width: conf.WIDTH,\n      height: conf.HEIGHT,\n      tiles: generateMap(conf.WIDTH, conf.HEIGHT),\n    },\n    gameOver: false,\n    victory: false,\n    powerups: [],\n    gameStarted: false,\n    level: 1,\n    maxLevel: 10,\n    levelTimer: conf.LEVELTIME,\n    score: 0\n  }\n\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n\n  const advanceToNextLevel = () => {\n    const nextLevel = state.current.level + 1\n  \n    if (nextLevel > state.current.maxLevel) {\n      state.current.gameOver = true\n      return\n    }\n  \n    state.current.level = nextLevel\n    state.current.victory = false\n    state.current.levelTimer = conf.LEVELTIME + (nextLevel - 1) * conf.ADDITIONALTIME\n  \n    // Re-generate the map\n    state.current.gameMap.tiles = generateMap(state.current.gameMap.width, state.current.gameMap.height)\n  \n    // Reset player\n    state.current.player.x = 1\n    state.current.player.y = 1\n    state.current.player.alive = true\n    state.current.player.bombs = 1\n    state.current.player.bombRange = 2\n  \n    // Reset enemies (increase with level)\n    const enemyCount = conf.ENEMIES + (nextLevel - 1) * conf.ADDITIONALENEMIES\n    const enemies = []\n    while(enemies.length < enemyCount) {\n      const x = Math.floor(Math.random() * state.current.gameMap.width)\n      const y = Math.floor(Math.random() * state.current.gameMap.height)\n      const tile = state.current.gameMap.tiles[y][x]\n\n      if (tile === TileType.EMPTY && x >= 5 && y >= 5) {\n        enemies.push({\n          x,\n          y,\n          direction: 'up' as 'up',\n          alive: true,\n          moveEvery: 0\n        })\n      }\n    }\n    \n    state.current.enemies = enemies as Enemy[]\n  \n    // Reset powerups, bombs, explosions\n    state.current.bombs = []\n    state.current.explosions = []\n    state.current.powerups = []\n  }\n  \n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (!state.current.gameStarted) {\n      state.current.gameStarted = true\n\n      const enemyCount = conf.ENEMIES\n      const enemies = []\n\n      while(enemies.length < enemyCount) {\n        const x = Math.floor(Math.random() * state.current.gameMap.width)\n        const y = Math.floor(Math.random() * state.current.gameMap.height)\n        const tile = state.current.gameMap.tiles[y][x]\n  \n        if (tile === TileType.EMPTY && x >= 5 && y >= 5) {\n          enemies.push({\n            x,\n            y,\n            direction: 'up' as 'up',\n            alive: true,\n            moveEvery: 0\n          })\n        }\n      }\n\n      state.current.enemies = enemies\n      return\n    }\n\n    if (state.current.victory) {\n      advanceToNextLevel()\n      return\n    }\n\n    if (state.current.gameOver) return\n\n    const {x, y} = state.current.player\n    let newX = x\n    let newY = y\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up'\n        newY--\n        break\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down'\n        newY++\n        break\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left'\n        newX--\n        break\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right'\n        newX++\n        break\n      case ' ':\n      case 'Enter': {\n        const {x, y, bombs} = state.current.player\n        const tile = state.current.gameMap.tiles[y][x]\n        const alreadyExists = state.current.bombs.some(b => b.x === x && b.y === y)\n        if (tile !== TileType.WALL && tile !== TileType.WATER && !alreadyExists && bombs > 0) {\n          state.current.bombs.push({\n            x,\n            y,\n            range: state.current.player.bombRange,\n            timer: conf.BOMBTIME,\n            owner: 'player',\n          })\n          state.current.player.bombs--\n        }\n        break\n      }\n    }\n\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX]\n\n      const isBombThere = state.current.bombs.some(b => b.x === newX && b.y === newY)\n      const isStandingOnBomb = state.current.bombs.some(b => b.x === x && b.y === y)\n      if (isBombThere && !isStandingOnBomb) return\n      if (isWalkable(tile)) {\n        state.current.player.x = newX\n        state.current.player.y = newY\n      }\n    }\n  }\n\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n    if (state.current.gameStarted && !state.current.gameOver && !state.current.victory){\n      state.current.levelTimer--\n      if (state.current.levelTimer <= 0){\n        state.current.gameOver = true\n      }\n    }\n\n    // const explodedBombs = state.current.bombs.filter(bomb => bomb.timer <= 0)\n    // explodedBombs.forEach(bomb => {\n    //   explodeBomb(bomb, state.current)\n    // })\n\n    // state.current.bombs = state.current.bombs.filter(bomb => bomb.timer > 0)\n\n    state.current.bombs.forEach(bomb => bomb.timer--)\n    const toExplode = state.current.bombs.filter(b => b.timer <= 0)\n\n    state.current.bombs.forEach(b => {\n      if (b.timer > 0) b.timer--\n      if (b.timer === 0) toExplode.push(b)\n    })\n\n    state.current.bombs = state.current.bombs.filter(b => !toExplode.includes(b))\n    toExplode.forEach(b => explodeBomb(b,state.current))\n\n    state.current.explosions = state.current.explosions.filter(e => {\n      e.duration--\n      return e.duration > 0\n    })\n\n    if (state.current.freezeTimer && state.current.freezeTimer > 0) state.current.freezeTimer--\n\n    const tryMoveEnemy = (enemy : Enemy) => {\n      if (!state.current.gameStarted) return\n      if (state.current.freezeTimer && state.current.freezeTimer > 0) return\n\n      if (enemy.moveEvery > 0){\n        enemy.moveEvery--\n        return\n      }\n\n      const {x, y} = enemy\n      const directions: Enemy['direction'][] = ['up', 'down', 'left', 'right']\n\n      const preferredDirs = [enemy.direction, ...directions.filter(d => d !== enemy.direction)]\n\n      let moved = false\n\n      for (const dir of preferredDirs) {\n        let newX = x\n        let newY = y\n        switch (dir) {\n          case 'up':\n            newY--\n            break\n          case 'down':\n            newY++\n            break\n          case 'left':\n            newX--\n            break\n          case 'right':\n            newX++\n            break\n        }\n\n        const isInBounds = newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height\n        const tile = isInBounds ? state.current.gameMap.tiles[newY][newX] : TileType.WALL\n        const isBlocked = !isWalkable(tile) || state.current.bombs.some(b => b.x === newX && b.y === newY)\n\n        if (!isBlocked) {\n          enemy.x = newX\n          enemy.y = newY\n          enemy.direction = dir\n          moved = true\n          break\n        }\n      }\n\n      if (!moved && Math.random() < 0.2){\n        const dirs: Enemy['direction'][] = ['up', 'down', 'left', 'right']\n        enemy.direction = dirs[Math.floor(Math.random() * dirs.length)]\n      }\n      enemy.moveEvery = 60\n    }\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive) tryMoveEnemy(enemy)\n    })\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive && state.current.player.alive && state.current.player.x === enemy.x && state.current.player.y === enemy.y) {\n        state.current.player.alive = false\n        state.current.gameOver = true\n      }\n    })\n\n    state.current.powerups = state.current.powerups.filter(p => {\n      if (p.x === state.current.player.x && p.y === state.current.player.y) {\n        if (p.type === 'bomb') state.current.player.bombs++\n        if (p.type === 'range') state.current.player.bombRange++\n        if (p.type === 'freeze') state.current.freezeTimer = 300\n\n        state.current.score =+ 20\n        return false\n      }\n      return true\n    })\n\n    if (!state.current.victory && state.current.enemies.length > 0 && state.current.enemies.every(e => !e.alive)) {\n      state.current.victory = true\n      state.current.score += state.current.levelTimer\n    }\n    // Render the game state\n    render(ctx)(state.current)\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current)\n      window.addEventListener('keydown', handleKeyDown)\n    }\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}