{"ast":null,"code":"var _jsxFileName = \"/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as conf from './conf';\nimport { useEffect, useRef } from 'react';\nimport { generateMap, isWalkable, TileType, explodeBomb } from './state';\nimport { render } from './renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(() => iterate(ctx));\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const initialState = {\n    player: {\n      x: 1,\n      y: 1,\n      alive: true,\n      bombs: 1,\n      bombRange: 1,\n      direction: 'right'\n    },\n    bombs: [],\n    explosions: [],\n    enemies: [{\n      x: 5,\n      y: 5,\n      alive: true,\n      direction: 'left'\n    }, {\n      x: 10,\n      y: 10,\n      alive: true,\n      direction: 'right'\n    }],\n    gameMap: {\n      width: conf.WIDTH,\n      height: conf.HEIGHT,\n      tiles: generateMap(conf.WIDTH, conf.HEIGHT)\n    },\n    gameOver: false,\n    victory: false\n  };\n  const ref = useRef();\n  const state = useRef(initialState);\n\n  const handleKeyDown = e => {\n    if (state.current.gameOver) return;\n    const {\n      x,\n      y\n    } = state.current.player;\n    let newX = x;\n    let newY = y;\n\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up';\n        newY--;\n        break;\n\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down';\n        newY++;\n        break;\n\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left';\n        newX--;\n        break;\n\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right';\n        newX++;\n        break;\n\n      case ' ':\n      case 'Enter':\n        {\n          const {\n            x,\n            y,\n            bombs\n          } = state.current.player;\n          const tile = state.current.gameMap.tiles[y][x];\n          const alreadyExists = state.current.bombs.some(b => b.x === x && b.y === y);\n\n          if (tile !== TileType.WALL && tile !== TileType.WATER && !alreadyExists && bombs > 0) {\n            state.current.bombs.push({\n              x,\n              y,\n              range: state.current.player.bombRange,\n              timer: conf.TIMER,\n              owner: 'player'\n            });\n            state.current.player.bombs--;\n          }\n\n          break;\n        }\n    }\n\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX];\n      const isBombThere = state.current.bombs.some(b => b.x === newX && b.y === newY);\n      const isStandingOnBomb = state.current.bombs.some(b => b.x === x && b.y === y);\n      if (isBombThere && !isStandingOnBomb) return;\n\n      if (isWalkable(tile)) {\n        state.current.player.x = newX;\n        state.current.player.y = newY;\n      }\n    }\n  };\n\n  const iterate = ctx => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    state.current.bombs.forEach(bomb => bomb.timer--);\n    const explodedBombs = state.current.bombs.filter(bomb => bomb.timer <= 0);\n    explodedBombs.forEach(bomb => {\n      explodeBomb(bomb, state.current);\n    });\n    state.current.bombs = state.current.bombs.filter(bomb => bomb.timer > 0);\n    state.current.explosions = state.current.explosions.filter(e => {\n      e.duration--;\n      return e.duration > 0;\n    });\n\n    const tryMoveEnemy = enemy => {\n      const dir = enemy.direction;\n      let newX = enemy.x;\n      let newY = enemy.y;\n\n      switch (dir) {\n        case 'up':\n          newY--;\n          break;\n\n        case 'down':\n          newY++;\n          break;\n\n        case 'left':\n          newX--;\n          break;\n\n        case 'right':\n          newX++;\n          break;\n      }\n\n      const isInBounds = newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height;\n      const tile = isInBounds ? state.current.gameMap.tiles[newY][newX] : TileType.WALL;\n      const isBlocked = !isWalkable(tile) || state.current.bombs.some(b => b.x === newX && b.y === newY);\n\n      if (!isBlocked) {\n        enemy.x = newX;\n        enemy.y = newY;\n      } else {\n        const dirs = ['up', 'down', 'left', 'right'];\n        enemy.direction = dirs[Math.floor(Math.random() * dirs.length)];\n      }\n    };\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive) tryMoveEnemy(enemy);\n    });\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive && state.current.player.alive && state.current.player.x === enemy.x && state.current.player.y === enemy.y) {\n        state.current.player.alive = false;\n        state.current.gameOver = true;\n      }\n    }); // Render the game state\n\n    render(ctx)(state.current);\n    requestAnimationFrame(() => iterate(ctx));\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current);\n      window.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"Gpm0P4FfDB25XYapIJctmdb7SaA=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx"],"names":["conf","useEffect","useRef","generateMap","isWalkable","TileType","explodeBomb","render","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","initialState","player","x","y","alive","bombs","bombRange","direction","explosions","enemies","gameMap","WIDTH","HEIGHT","tiles","gameOver","victory","ref","state","handleKeyDown","e","current","newX","newY","key","tile","alreadyExists","some","b","WALL","WATER","push","range","timer","TIMER","owner","isBombThere","isStandingOnBomb","clearRect","forEach","bomb","explodedBombs","filter","duration","tryMoveEnemy","enemy","dir","isInBounds","isBlocked","dirs","Math","floor","random","length","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { useEffect, useRef } from 'react'\nimport { generateMap, isWalkable, State, TileType, explodeBomb, Enemy } from './state'\nimport { render } from './renderer'\nimport { stat } from 'fs'\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = {\n    player: {\n      x: 1,\n      y: 1,\n      alive: true,\n      bombs: 1,\n      bombRange: 1,\n      direction: 'right'\n    },\n    bombs: [],\n    explosions: [],\n    enemies: [\n      { x: 5, y: 5, alive: true, direction: 'left' },\n      { x: 10, y: 10, alive: true, direction: 'right' }\n    ],\n    gameMap: {\n      width: conf.WIDTH,\n      height: conf.HEIGHT,\n      tiles: generateMap(conf.WIDTH, conf.HEIGHT),\n    },\n    gameOver: false,\n    victory: false\n  }\n\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (state.current.gameOver) return\n    const {x, y} = state.current.player\n    let newX = x\n    let newY = y\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up'\n        newY--\n        break\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down'\n        newY++\n        break\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left'\n        newX--\n        break\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right'\n        newX++\n        break\n      case ' ':\n      case 'Enter': {\n        const {x, y, bombs} = state.current.player\n        const tile = state.current.gameMap.tiles[y][x]\n        const alreadyExists = state.current.bombs.some(b => b.x === x && b.y === y)\n        if (tile !== TileType.WALL && tile !== TileType.WATER && !alreadyExists && bombs > 0) {\n          state.current.bombs.push({\n            x,\n            y,\n            range: state.current.player.bombRange,\n            timer: conf.TIMER,\n            owner: 'player',\n          })\n          state.current.player.bombs--\n        }\n        break\n      }\n    }\n\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX]\n\n      const isBombThere = state.current.bombs.some(b => b.x === newX && b.y === newY)\n      const isStandingOnBomb = state.current.bombs.some(b => b.x === x && b.y === y)\n      if (isBombThere && !isStandingOnBomb) return\n      if (isWalkable(tile)) {\n        state.current.player.x = newX\n        state.current.player.y = newY\n      }\n    }\n  }\n\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n    state.current.bombs.forEach(bomb => bomb.timer--)\n    const explodedBombs = state.current.bombs.filter(bomb => bomb.timer <= 0)\n    explodedBombs.forEach(bomb => {\n      explodeBomb(bomb, state.current)\n    })\n\n    state.current.bombs = state.current.bombs.filter(bomb => bomb.timer > 0)\n\n    state.current.explosions = state.current.explosions.filter(e => {\n      e.duration--\n      return e.duration > 0\n    })\n\n    const tryMoveEnemy = (enemy : Enemy) => {\n      const dir = enemy.direction\n      let newX = enemy.x\n      let newY = enemy.y\n      switch (dir) {\n        case 'up':\n          newY--\n          break\n        case 'down':\n          newY++\n          break\n        case 'left':\n          newX--\n          break\n        case 'right':\n          newX++\n          break\n      }\n      const isInBounds = newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height\n      const tile = isInBounds ? state.current.gameMap.tiles[newY][newX] : TileType.WALL\n      const isBlocked = !isWalkable(tile) || state.current.bombs.some(b => b.x === newX && b.y === newY)\n\n      if (!isBlocked) {\n        enemy.x = newX\n        enemy.y = newY\n      } else {\n        const dirs: Enemy['direction'][] = ['up', 'down', 'left', 'right']\n        enemy.direction = dirs[Math.floor(Math.random() * dirs.length)]\n      }\n    }\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive) tryMoveEnemy(enemy)\n    })\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive && state.current.player.alive && state.current.player.x === enemy.x && state.current.player.y === enemy.y) {\n        state.current.player.alive = false\n        state.current.gameOver = true\n      }\n    })\n    // Render the game state\n    render(ctx)(state.current)\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current)\n      window.addEventListener('keydown', handleKeyDown)\n    }\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}