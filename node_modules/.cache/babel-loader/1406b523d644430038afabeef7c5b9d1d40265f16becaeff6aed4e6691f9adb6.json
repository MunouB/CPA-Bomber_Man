{"ast":null,"code":"import './state';\nimport './renderer'; // const randomInt = (max: number) => Math.floor(Math.random() * max)\n// const randomSign = () => Math.sign(Math.random() - 0.5)\n// const initCanvas =\n//   (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n//   (canvas: HTMLCanvasElement) => {\n//     const ctx = canvas.getContext('2d')\n//     if (!ctx) return\n//     requestAnimationFrame(() => iterate(ctx))\n//   }\n// const Canvas = ({ height, width }: { height: number; width: number }) => {\n//   const initialState: State = {\n//     pos: new Array(2).fill(1).map((_) => ({\n//       life: conf.BALLLIFE,\n//       coord: {\n//         x: randomInt(width - 120) + 60,\n//         y: randomInt(height - 120) + 60,\n//         dx: 4 * randomSign(),\n//         dy: 4 * randomSign(),\n//       },\n//     })),\n//     size: { height, width },\n//     endOfGame: true,\n//   }\n//   const ref = useRef<any>()\n//   const state = useRef<State>(initialState)\n//   const iterate = (ctx: CanvasRenderingContext2D) => {\n//     state.current = step(state.current)\n//     state.current.endOfGame = !endOfGame(state.current)\n//     render(ctx)(state.current)\n//     if (!state.current.endOfGame) requestAnimationFrame(() => iterate(ctx))\n//   }\n//   const onClick = (e: PointerEvent) => {\n//     state.current = click(state.current)(e)\n//   }\n//   const onMove = (e: PointerEvent) => {\n//     state.current = mouseMove(state.current)(e)\n//   }\n//   useEffect(() => {\n//     if (ref.current) {\n//       initCanvas(iterate)(ref.current)\n//       ref.current.addEventListener('click', onClick)\n//       ref.current.addEventListener('mousemove', onMove)\n//     }\n//     return () => {\n//       ref.current.removeEventListener('click', onMove)\n//       ref.current.removeEventListener('mousemove', onMove)\n//     }\n//   }, [])\n//   return <canvas {...{ height, width, ref }} />\n// }\n// export default Canvas","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx"],"names":[],"mappings":"AAEA,OAAgB,SAAhB;AACA,OAAgB,YAAhB,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import * as conf from './conf'\nimport { useRef, useEffect } from 'react'\nimport { } from './state'\nimport { } from './renderer'\n\n// const randomInt = (max: number) => Math.floor(Math.random() * max)\n// const randomSign = () => Math.sign(Math.random() - 0.5)\n\n// const initCanvas =\n//   (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n//   (canvas: HTMLCanvasElement) => {\n//     const ctx = canvas.getContext('2d')\n//     if (!ctx) return\n//     requestAnimationFrame(() => iterate(ctx))\n//   }\n\n// const Canvas = ({ height, width }: { height: number; width: number }) => {\n//   const initialState: State = {\n//     pos: new Array(2).fill(1).map((_) => ({\n//       life: conf.BALLLIFE,\n//       coord: {\n//         x: randomInt(width - 120) + 60,\n//         y: randomInt(height - 120) + 60,\n//         dx: 4 * randomSign(),\n//         dy: 4 * randomSign(),\n//       },\n//     })),\n//     size: { height, width },\n//     endOfGame: true,\n//   }\n\n//   const ref = useRef<any>()\n//   const state = useRef<State>(initialState)\n\n//   const iterate = (ctx: CanvasRenderingContext2D) => {\n//     state.current = step(state.current)\n//     state.current.endOfGame = !endOfGame(state.current)\n//     render(ctx)(state.current)\n//     if (!state.current.endOfGame) requestAnimationFrame(() => iterate(ctx))\n//   }\n//   const onClick = (e: PointerEvent) => {\n//     state.current = click(state.current)(e)\n//   }\n\n//   const onMove = (e: PointerEvent) => {\n//     state.current = mouseMove(state.current)(e)\n//   }\n//   useEffect(() => {\n//     if (ref.current) {\n//       initCanvas(iterate)(ref.current)\n//       ref.current.addEventListener('click', onClick)\n//       ref.current.addEventListener('mousemove', onMove)\n//     }\n//     return () => {\n//       ref.current.removeEventListener('click', onMove)\n//       ref.current.removeEventListener('mousemove', onMove)\n//     }\n//   }, [])\n//   return <canvas {...{ height, width, ref }} />\n// }\n\n// export default Canvas\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}