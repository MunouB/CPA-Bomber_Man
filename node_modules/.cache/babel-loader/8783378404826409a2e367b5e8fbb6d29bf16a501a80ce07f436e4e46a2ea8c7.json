{"ast":null,"code":"import * as conf from './conf';\nimport { playerSprites } from './images';\nimport * as img from './images';\nimport { TileType } from './state';\nexport const render = ctx => state => {\n  var _state$freezeTimer;\n\n  const tileSize = conf.TILESIZE;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x];\n      const px = x * tileSize;\n      const py = y * tileSize;\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.WATER:\n          ctx.drawImage(img.waterImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EMPTY:\n          ctx.fillStyle = '#dedede';\n          ctx.fillRect(px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EXPLOSION:\n          ctx.drawImage(img.explosionImage, px, py, tileSize, tileSize);\n          break;\n      }\n    }\n  }\n\n  const aliveEnemies = state.enemies.filter(enemy => enemy.alive).length;\n  const pauseIcon = state.paused ? img.continueImage : img.pauseImage;\n  const muteIcon = state.muted ? img.unmuteImage : img.muteImage; // Afficher Stats\n\n  ctx.drawImage(img.enemyImage, 0, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.levelImage, 0, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupRangeImage, tileSize * 3, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupBombImage, tileSize * 3, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupFreezeImage, tileSize * 6, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.timeImage, tileSize * 6, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(pauseIcon, tileSize * 10, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.restartImage, tileSize * 10, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(muteIcon, tileSize * 13, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.scoreImage, tileSize * 13, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.fillStyle = 'brown';\n  ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`;\n  ctx.fillText(`${aliveEnemies}`, tileSize, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${state.level}`, tileSize, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText(`${state.player.bombRange}`, tileSize * 4, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${state.player.bombs}`, tileSize * 4, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText(`${Math.ceil(((_state$freezeTimer = state.freezeTimer) !== null && _state$freezeTimer !== void 0 ? _state$freezeTimer : 0) / 60)}s`, tileSize * 7, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${Math.ceil(state.levelTimer / 60)}s`, tileSize * 7, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText('P', tileSize * 11, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText('R', tileSize * 11, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText('M', tileSize * 14, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${state.score}`, tileSize * 14, (conf.HEIGHT + 1.75) * tileSize); // Render player\n\n  const playerImg = playerSprites[state.player.direction];\n\n  if (playerImg.complete) {\n    ctx.drawImage(playerImg, state.player.x * tileSize, state.player.y * tileSize, tileSize, tileSize);\n  } // Render bombs\n\n\n  state.bombs.forEach(bomb => {\n    ctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize);\n  }); // Render explosions\n\n  state.explosions.forEach(explosion => {\n    ctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize);\n  }); // Render enemies\n\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return;\n    ctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize);\n  }); // Render PowerUps\n\n  state.powerups.forEach(p => {\n    if (p.type === 'bomb') ctx.drawImage(img.powerupBombImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize);else if (p.type === 'range') ctx.drawImage(img.powerupRangeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize);else if (p.type === 'freeze') ctx.drawImage(img.powerupFreezeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize);\n    const isBlinking = p.duration !== undefined && p.duration < 180;\n  });\n\n  if (state.paused) {\n    ctx.fillText('Game Paused', tileSize * 21.5, (conf.HEIGHT + 0.75) * tileSize);\n    ctx.fillText('Press P to continue', tileSize * 19, (conf.HEIGHT + 1.75) * tileSize);\n  }\n\n  if (state.gameOver) {\n    ctx.fillText('Game Over', tileSize * 21.5, (conf.HEIGHT + 0.75) * tileSize);\n    ctx.fillText('Press R to restart', tileSize * 19, (conf.HEIGHT + 1.75) * tileSize);\n  }\n\n  if (!state.gameStarted) {\n    ctx.fillText('Press any key to start', tileSize * 17, (conf.HEIGHT + 1.25) * tileSize);\n    return;\n  }\n\n  if (state.victory) {\n    ctx.fillText('YOU WIN', tileSize * 22, (conf.HEIGHT + 0.75) * tileSize);\n    ctx.fillText('Press any key to continue', tileSize * 17, (conf.HEIGHT + 1.75) * tileSize);\n  }\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/renderer.ts"],"names":["conf","playerSprites","img","TileType","render","ctx","state","tileSize","TILESIZE","clearRect","canvas","width","height","y","gameMap","x","tile","tiles","px","py","WALL","drawImage","wallImage","BREAKABLE","breakableImage","WATER","waterImage","EMPTY","fillStyle","fillRect","EXPLOSION","explosionImage","aliveEnemies","enemies","filter","enemy","alive","length","pauseIcon","paused","continueImage","pauseImage","muteIcon","muted","unmuteImage","muteImage","enemyImage","HEIGHT","levelImage","powerupRangeImage","powerupBombImage","powerupFreezeImage","timeImage","restartImage","scoreImage","font","Math","floor","fillText","level","player","bombRange","bombs","ceil","freezeTimer","levelTimer","score","playerImg","direction","complete","forEach","bomb","bombImage","explosions","explosion","powerups","p","type","isBlinking","duration","undefined","gameOver","gameStarted","victory"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { playerSprites } from './images'\nimport * as img from './images'\nimport { TileType, State } from './state'\n\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  const tileSize = conf.TILESIZE\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  \n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x]\n\n      const px = x * tileSize\n      const py = y * tileSize\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize)\n          break\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize)\n          break\n        case TileType.WATER:\n          ctx.drawImage(img.waterImage, px, py, tileSize, tileSize)\n          break\n        case TileType.EMPTY:\n          ctx.fillStyle = '#dedede'\n          ctx.fillRect(px, py, tileSize, tileSize)\n          break\n        case TileType.EXPLOSION:\n          ctx.drawImage(img.explosionImage, px, py, tileSize, tileSize)\n          break\n      }\n    }\n  }\n\n  const aliveEnemies = state.enemies.filter(enemy => enemy.alive).length\n  const pauseIcon = state.paused ? img.continueImage : img.pauseImage\n  const muteIcon = state.muted ? img.unmuteImage : img.muteImage\n\n  // Afficher Stats\n  ctx.drawImage(img.enemyImage, 0, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.levelImage, 0, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.powerupRangeImage, tileSize * 3, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.powerupBombImage, tileSize * 3, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.powerupFreezeImage, tileSize * 6, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.timeImage, tileSize * 6, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(pauseIcon, tileSize * 10, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.restartImage, tileSize * 10, (conf.HEIGHT+1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(muteIcon, tileSize * 13, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.scoreImage, tileSize * 13, (conf.HEIGHT+1) * tileSize, tileSize, tileSize)\n  \n  ctx.fillStyle = 'brown'\n  ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`\n\n  ctx.fillText(`${aliveEnemies}`, tileSize, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText(`${state.level}`, tileSize, (conf.HEIGHT + 1.75) * tileSize)\n  ctx.fillText(`${state.player.bombRange}`, tileSize * 4, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText(`${state.player.bombs}`, tileSize * 4, (conf.HEIGHT + 1.75) * tileSize)\n  ctx.fillText(`${Math.ceil((state.freezeTimer ?? 0) / 60)}s`, tileSize * 7, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText(`${Math.ceil(state.levelTimer / 60)}s`, tileSize * 7, (conf.HEIGHT + 1.75) * tileSize)\n  ctx.fillText('P', tileSize * 11, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText('R', tileSize * 11, (conf.HEIGHT + 1.75) * tileSize)\n  ctx.fillText('M', tileSize * 14, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText(`${state.score}`, tileSize * 14, (conf.HEIGHT + 1.75) * tileSize)\n\n  // Render player\n  const playerImg = playerSprites[state.player.direction]\n  if (playerImg.complete) {\n    ctx.drawImage(\n      playerImg,\n      state.player.x * tileSize,\n      state.player.y * tileSize,\n      tileSize,\n      tileSize\n    )\n  }\n\n  // Render bombs\n  state.bombs.forEach(bomb => {\n    ctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize)\n  })\n  // Render explosions\n  state.explosions.forEach(explosion => {\n    ctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize)\n    \n  })\n  // Render enemies\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return\n    ctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize)\n  })\n  // Render PowerUps\n  state.powerups.forEach(p => {\n    if (p.type === 'bomb') ctx.drawImage(img.powerupBombImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n    else if (p.type === 'range') ctx.drawImage(img.powerupRangeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n    else if (p.type === 'freeze') ctx.drawImage(img.powerupFreezeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n    \n    const isBlinking = p.duration !== undefined && p.duration < 180\n  })\n  if (state.paused){\n    ctx.fillText('Game Paused', tileSize * 21.5, (conf.HEIGHT + 0.75) * tileSize)\n    ctx.fillText('Press P to continue', tileSize * 19, (conf.HEIGHT + 1.75) * tileSize)\n  }\n  if (state.gameOver) {\n    ctx.fillText('Game Over', tileSize * 21.5, (conf.HEIGHT + 0.75) * tileSize)\n    ctx.fillText('Press R to restart', tileSize * 19, (conf.HEIGHT + 1.75) * tileSize)\n  }\n  if (!state.gameStarted){\n    ctx.fillText('Press any key to start', tileSize * 17, (conf.HEIGHT + 1.25) * tileSize)\n    return\n  }\n  if (state.victory) {\n    ctx.fillText('YOU WIN', tileSize * 22, (conf.HEIGHT + 0.75) * tileSize)\n    ctx.fillText('Press any key to continue', tileSize * 17, (conf.HEIGHT + 1.75) * tileSize)\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}