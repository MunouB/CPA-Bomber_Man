{"ast":null,"code":"import * as conf from './conf';\nimport { playerSprites } from './images';\nimport { TileType } from './state';\nexport const render = ctx => state => {\n  const tileSize = conf.TILESIZE;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x];\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.fillStyle = 'black';\n          break;\n\n        case TileType.BREAKABLE:\n          ctx.fillStyle = 'brown';\n          break;\n\n        case TileType.WATER:\n          ctx.fillStyle = 'blue';\n          break;\n\n        case TileType.EMPTY:\n          ctx.fillStyle = 'white';\n          break;\n\n        case TileType.EXPLOSION:\n          ctx.fillStyle = 'red';\n          break;\n      }\n\n      ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);\n    }\n  } // Render player\n\n\n  const playerImg = playerSprites[state.player.direction];\n\n  if (playerImg.complete) {\n    const tileSize = 60;\n    ctx.drawImage(playerImg, state.player.x * tileSize, state.player.y * tileSize, tileSize, tileSize);\n  }\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/renderer.ts"],"names":["conf","playerSprites","TileType","render","ctx","state","tileSize","TILESIZE","clearRect","canvas","width","height","y","gameMap","x","tile","tiles","WALL","fillStyle","BREAKABLE","WATER","EMPTY","EXPLOSION","fillRect","playerImg","player","direction","complete","drawImage"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,QAAT,QAAgC,SAAhC;AAEA,OAAO,MAAMC,MAAM,GAAIC,GAAD,IAAoCC,KAAD,IAAkB;AACzE,QAAMC,QAAQ,GAAGN,IAAI,CAACO,QAAtB;AACAH,EAAAA,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBJ,GAAG,CAACK,MAAJ,CAAWC,KAA/B,EAAsCN,GAAG,CAACK,MAAJ,CAAWE,MAAjD;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,OAAN,CAAcF,MAAlC,EAA0CC,CAAC,EAA3C,EAA+C;AAC7C,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACQ,OAAN,CAAcH,KAAlC,EAAyCI,CAAC,EAA1C,EAA8C;AAC5C,YAAMC,IAAI,GAAGV,KAAK,CAACQ,OAAN,CAAcG,KAAd,CAAoBJ,CAApB,EAAuBE,CAAvB,CAAb;;AAEA,cAAQC,IAAR;AACE,aAAKb,QAAQ,CAACe,IAAd;AACEb,UAAAA,GAAG,CAACc,SAAJ,GAAgB,OAAhB;AACA;;AACF,aAAKhB,QAAQ,CAACiB,SAAd;AACEf,UAAAA,GAAG,CAACc,SAAJ,GAAgB,OAAhB;AACA;;AACF,aAAKhB,QAAQ,CAACkB,KAAd;AACEhB,UAAAA,GAAG,CAACc,SAAJ,GAAgB,MAAhB;AACA;;AACF,aAAKhB,QAAQ,CAACmB,KAAd;AACEjB,UAAAA,GAAG,CAACc,SAAJ,GAAgB,OAAhB;AACA;;AACF,aAAKhB,QAAQ,CAACoB,SAAd;AACElB,UAAAA,GAAG,CAACc,SAAJ,GAAgB,KAAhB;AACA;AAfJ;;AAiBAd,MAAAA,GAAG,CAACmB,QAAJ,CAAaT,CAAC,GAAGR,QAAjB,EAA2BM,CAAC,GAAGN,QAA/B,EAAyCA,QAAzC,EAAmDA,QAAnD;AACD;AACF,GA1BwE,CA4BzE;;;AACA,QAAMkB,SAAS,GAAGvB,aAAa,CAACI,KAAK,CAACoB,MAAN,CAAaC,SAAd,CAA/B;;AACA,MAAIF,SAAS,CAACG,QAAd,EAAwB;AACtB,UAAMrB,QAAQ,GAAG,EAAjB;AACAF,IAAAA,GAAG,CAACwB,SAAJ,CACEJ,SADF,EAEEnB,KAAK,CAACoB,MAAN,CAAaX,CAAb,GAAiBR,QAFnB,EAGED,KAAK,CAACoB,MAAN,CAAab,CAAb,GAAiBN,QAHnB,EAIEA,QAJF,EAKEA,QALF;AAOD;AACF,CAxCM","sourcesContent":["import * as conf from './conf'\nimport { playerSprites } from './images'\nimport { TileType, State } from './state'\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  const tileSize = conf.TILESIZE\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x]\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.fillStyle = 'black'\n          break\n        case TileType.BREAKABLE:\n          ctx.fillStyle = 'brown'\n          break\n        case TileType.WATER:\n          ctx.fillStyle = 'blue'\n          break\n        case TileType.EMPTY:\n          ctx.fillStyle = 'white'\n          break\n        case TileType.EXPLOSION:\n          ctx.fillStyle = 'red'\n          break\n      }\n      ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize)\n    }\n  }\n\n  // Render player\n  const playerImg = playerSprites[state.player.direction]\n  if (playerImg.complete) {\n    const tileSize = 60\n    ctx.drawImage(\n      playerImg,\n      state.player.x * tileSize,\n      state.player.y * tileSize,\n      tileSize,\n      tileSize\n    )\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}