{"ast":null,"code":"import * as conf from './conf';\nimport { playerSprites } from './images';\nimport * as img from './images';\nimport { TileType } from './state';\nexport const render = ctx => state => {\n  const tileSize = conf.TILESIZE;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x];\n      const px = x * tileSize;\n      const py = y * tileSize;\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.WATER:\n          ctx.drawImage(img.waterImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EMPTY:\n          ctx.fillStyle = '#dedede';\n          ctx.fillRect(px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EXPLOSION:\n          ctx.drawImage(img.explosionImage, px, py, tileSize, tileSize);\n          break;\n      }\n    }\n  } // Afficher\n\n\n  ctx.fillStyle = 'red';\n  ctx.font = '50px Arial';\n  ctx.fillText('Hello from renderer', 50, 50);\n  ctx.fillStyle = 'purple';\n  ctx.font = '50px Arial';\n  ctx.fillText(`Level: ${state.level}`, 10, ctx.canvas.height - 50);\n  ctx.fillText(`Time: ${Math.ceil(state.levelTimer / 60)}s`, 10, ctx.canvas.height - 30); // Render player\n\n  const playerImg = playerSprites[state.player.direction];\n\n  if (playerImg.complete) {\n    ctx.drawImage(playerImg, state.player.x * tileSize, state.player.y * tileSize, tileSize, tileSize);\n  } // Render bombs\n\n\n  state.bombs.forEach(bomb => {\n    ctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize);\n  }); // Render explosions\n\n  state.explosions.forEach(explosion => {\n    ctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize);\n  }); // Render enemies\n\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return;\n    ctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize);\n  }); // Render PowerUps\n\n  state.powerups.forEach(p => {\n    if (p.type === 'bomb') ctx.drawImage(img.powerupBombImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize);else if (p.type === 'range') ctx.drawImage(img.powerupRangeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize);else if (p.type === 'freeze') ctx.drawImage(img.powerupFreezeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize);\n  });\n\n  if (state.gameOver) {\n    ctx.fillStyle = 'black';\n    ctx.font = '30px Arial';\n    ctx.fillText('Game Over', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2);\n  }\n\n  if (!state.gameStarted) {\n    ctx.fillStyle = 'black';\n    ctx.font = '30px Arial';\n    ctx.fillText('Press any key to start', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2);\n    return;\n  }\n\n  if (state.victory) {\n    ctx.fillStyle = 'gold';\n    ctx.font = '50px Arial';\n    ctx.fillText('YOU WIN', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2);\n  }\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/renderer.ts"],"names":["conf","playerSprites","img","TileType","render","ctx","state","tileSize","TILESIZE","clearRect","canvas","width","height","y","gameMap","x","tile","tiles","px","py","WALL","drawImage","wallImage","BREAKABLE","breakableImage","WATER","waterImage","EMPTY","fillStyle","fillRect","EXPLOSION","explosionImage","font","fillText","level","Math","ceil","levelTimer","playerImg","player","direction","complete","bombs","forEach","bomb","bombImage","explosions","explosion","enemies","enemy","alive","enemyImage","powerups","p","type","powerupBombImage","powerupRangeImage","powerupFreezeImage","gameOver","gameStarted","victory"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { playerSprites } from './images'\nimport * as img from './images'\nimport { TileType, State } from './state'\n\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  const tileSize = conf.TILESIZE\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  \n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x]\n\n      const px = x * tileSize\n      const py = y * tileSize\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize)\n          break\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize)\n          break\n        case TileType.WATER:\n          ctx.drawImage(img.waterImage, px, py, tileSize, tileSize)\n          break\n        case TileType.EMPTY:\n          ctx.fillStyle = '#dedede'\n          ctx.fillRect(px, py, tileSize, tileSize)\n          break\n        case TileType.EXPLOSION:\n          ctx.drawImage(img.explosionImage, px, py, tileSize, tileSize)\n          break\n      }\n    }\n  }\n\n  // Afficher\n  ctx.fillStyle = 'red'\n  ctx.font = '50px Arial'\n  ctx.fillText('Hello from renderer', 50, 50)\n\n  ctx.fillStyle = 'purple'\n  ctx.font = '50px Arial'\n  ctx.fillText(`Level: ${state.level}`, 10, ctx.canvas.height - 50)\n  ctx.fillText(`Time: ${Math.ceil(state.levelTimer / 60)}s`, 10, ctx.canvas.height - 30)\n\n  // Render player\n  const playerImg = playerSprites[state.player.direction]\n  if (playerImg.complete) {\n    ctx.drawImage(\n      playerImg,\n      state.player.x * tileSize,\n      state.player.y * tileSize,\n      tileSize,\n      tileSize\n    )\n  }\n\n  // Render bombs\n  state.bombs.forEach(bomb => {\n    ctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize)\n  })\n  // Render explosions\n  state.explosions.forEach(explosion => {\n    ctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize)\n    \n  })\n  // Render enemies\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return\n    ctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize)\n  })\n  // Render PowerUps\n  state.powerups.forEach(p => {\n    if (p.type === 'bomb') ctx.drawImage(img.powerupBombImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n    else if (p.type === 'range') ctx.drawImage(img.powerupRangeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n    else if (p.type === 'freeze') ctx.drawImage(img.powerupFreezeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n  })\n  if (state.gameOver) {\n    ctx.fillStyle = 'black'\n    ctx.font = '30px Arial'\n    ctx.fillText('Game Over', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2)\n  }\n  if (!state.gameStarted){\n    ctx.fillStyle = 'black'\n    ctx.font = '30px Arial'\n    ctx.fillText('Press any key to start', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2)\n    return\n  }\n  if (state.victory) {\n    ctx.fillStyle = 'gold'\n    ctx.font = '50px Arial'\n    ctx.fillText('YOU WIN', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2)\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}