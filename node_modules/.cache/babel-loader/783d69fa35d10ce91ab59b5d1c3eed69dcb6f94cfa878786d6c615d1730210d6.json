{"ast":null,"code":"import * as conf from './conf';\nimport { playerSprites } from './images';\nimport * as img from './images';\nimport { TileType } from './state';\nexport const render = ctx => state => {\n  var _state$freezeTimer;\n\n  const tileSize = conf.TILESIZE;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.save();\n  ctx.scale(state.zoom, state.zoom);\n\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x];\n      const px = x * tileSize;\n      const py = y * tileSize;\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.WATER:\n          ctx.drawImage(img.waterImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EMPTY:\n          ctx.fillStyle = '#dedede';\n          ctx.fillRect(px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EXPLOSION:\n          ctx.drawImage(img.explosionImage, px, py, tileSize, tileSize);\n          break;\n      }\n    }\n  }\n\n  const aliveEnemies = state.enemies.filter(enemy => enemy.alive).length;\n  const pauseIcon = state.paused ? img.continueImage : img.pauseImage;\n  const muteIcon = state.muted ? img.unmuteImage : img.muteImage; // Afficher Stats\n\n  ctx.drawImage(img.enemyImage, 0, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.levelImage, 0, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupRangeImage, tileSize * 3, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupBombImage, tileSize * 3, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupFreezeImage, tileSize * 6, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.timeImage, tileSize * 6, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.zoomInImage, tileSize * 10, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.zoomOutImage, tileSize * 10, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(pauseIcon, tileSize * 13, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.restartImage, tileSize * 13, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(muteIcon, tileSize * 16, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.scoreImage, tileSize * 16, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.fillStyle = conf.TEXTCOLOR;\n  ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`;\n  ctx.fillText(`${aliveEnemies}`, tileSize, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${state.level}`, tileSize, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText(`${state.player.bombRange}`, tileSize * 4, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${state.player.bombs}`, tileSize * 4, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText(`${Math.ceil(((_state$freezeTimer = state.freezeTimer) !== null && _state$freezeTimer !== void 0 ? _state$freezeTimer : 0) / 60)}s`, tileSize * 7, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${Math.ceil(state.levelTimer / 60)}s`, tileSize * 7, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText('+', tileSize * 11, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText('-', tileSize * 11, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText('P', tileSize * 14, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText('R', tileSize * 14, (conf.HEIGHT + 1.75) * tileSize);\n  ctx.fillText('M', tileSize * 17, (conf.HEIGHT + 0.75) * tileSize);\n  ctx.fillText(`${state.score}`, tileSize * 17, (conf.HEIGHT + 1.75) * tileSize); // Render player\n\n  const playerImg = playerSprites[state.player.direction];\n\n  if (playerImg.complete) {\n    ctx.drawImage(playerImg, state.player.x * tileSize, state.player.y * tileSize, tileSize, tileSize);\n  } // Render bombs\n\n\n  state.bombs.forEach(bomb => {\n    ctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize);\n  }); // Render explosions\n\n  state.explosions.forEach(explosion => {\n    ctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize);\n  }); // Render enemies\n\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return;\n    ctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize);\n  }); // Render PowerUps\n\n  state.powerups.forEach(p => {\n    const powerupIcon = p.type === 'bomb' ? img.powerupBombImage : p.type === 'range' ? img.powerupRangeImage : img.powerupFreezeImage;\n    const isBlinking = p.duration !== undefined && p.duration < conf.BLINKDURATION;\n    const visible = !isBlinking || Math.floor(p.duration / conf.BLINKFRAME) % 2 === 0;\n    if (visible) ctx.drawImage(powerupIcon, p.x * tileSize, p.y * tileSize, tileSize, tileSize);\n  }); // Render Floating texts\n\n  state.floatingTexts.forEach(text => {\n    ctx.fillStyle = `rgba(150,75,0,${text.duration / conf.FLOATTEXTDURATION})`; // Fade out\n\n    ctx.fillText(text.value, text.x + conf.TILESIZE / 2, text.y);\n  });\n\n  if (state.paused) {\n    ctx.fillText('Game Paused', tileSize * 21.5, (conf.HEIGHT + 0.75) * tileSize);\n    ctx.fillText('Press P to continue', tileSize * 19, (conf.HEIGHT + 1.75) * tileSize);\n  }\n\n  if (state.gameOver) {\n    ctx.fillText('Game Over', tileSize * 22.5, (conf.HEIGHT + 0.75) * tileSize);\n    ctx.fillText('Press R to restart', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize);\n  }\n\n  if (!state.gameStarted) {\n    ctx.font = `${Math.floor(tileSize * 0.4)}px 'Press Start 2P'`;\n    ctx.fillText('Press any key to start', tileSize * 20, (conf.HEIGHT + 1.25) * tileSize);\n    ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`;\n    return;\n  }\n\n  if (state.victory) {\n    ctx.fillText('YOU WIN', tileSize * 23.5, (conf.HEIGHT + 0.75) * tileSize);\n    ctx.font = `${Math.floor(tileSize * 0.4)}px 'Press Start 2P'`;\n    ctx.fillText('Press any key to continue', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize);\n    ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`;\n  }\n\n  ctx.restore();\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/CPA-Bomber_Man/src/components/canvas/renderer.ts"],"names":["conf","playerSprites","img","TileType","render","ctx","state","tileSize","TILESIZE","clearRect","canvas","width","height","save","scale","zoom","y","gameMap","x","tile","tiles","px","py","WALL","drawImage","wallImage","BREAKABLE","breakableImage","WATER","waterImage","EMPTY","fillStyle","fillRect","EXPLOSION","explosionImage","aliveEnemies","enemies","filter","enemy","alive","length","pauseIcon","paused","continueImage","pauseImage","muteIcon","muted","unmuteImage","muteImage","enemyImage","HEIGHT","levelImage","powerupRangeImage","powerupBombImage","powerupFreezeImage","timeImage","zoomInImage","zoomOutImage","restartImage","scoreImage","TEXTCOLOR","font","Math","floor","fillText","level","player","bombRange","bombs","ceil","freezeTimer","levelTimer","score","playerImg","direction","complete","forEach","bomb","bombImage","explosions","explosion","powerups","p","powerupIcon","type","isBlinking","duration","undefined","BLINKDURATION","visible","BLINKFRAME","floatingTexts","text","FLOATTEXTDURATION","value","gameOver","gameStarted","victory","restore"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { playerSprites } from './images'\nimport * as img from './images'\nimport { TileType, State } from './state'\n\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  const tileSize = conf.TILESIZE\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n  ctx.save()\n  ctx.scale(state.zoom, state.zoom)\n  \n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x]\n\n      const px = x * tileSize\n      const py = y * tileSize\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize)\n          break\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize)\n          break\n        case TileType.WATER:\n          ctx.drawImage(img.waterImage, px, py, tileSize, tileSize)\n          break\n        case TileType.EMPTY:\n          ctx.fillStyle = '#dedede'\n          ctx.fillRect(px, py, tileSize, tileSize)\n          break\n        case TileType.EXPLOSION:\n          ctx.drawImage(img.explosionImage, px, py, tileSize, tileSize)\n          break\n      }\n    }\n  }\n\n  const aliveEnemies = state.enemies.filter(enemy => enemy.alive).length\n  const pauseIcon = state.paused ? img.continueImage : img.pauseImage\n  const muteIcon = state.muted ? img.unmuteImage : img.muteImage\n\n  // Afficher Stats\n  ctx.drawImage(img.enemyImage, 0, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.levelImage, 0, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.powerupRangeImage, tileSize * 3, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.powerupBombImage, tileSize * 3, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.powerupFreezeImage, tileSize * 6, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.timeImage, tileSize * 6, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.zoomInImage, tileSize * 10, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.zoomOutImage, tileSize * 10, (conf.HEIGHT+1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(pauseIcon, tileSize * 13, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.restartImage, tileSize * 13, (conf.HEIGHT+1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(muteIcon, tileSize * 16, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.scoreImage, tileSize * 16, (conf.HEIGHT+1) * tileSize, tileSize, tileSize)\n  \n  ctx.fillStyle = conf.TEXTCOLOR\n  ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`\n\n  ctx.fillText(`${aliveEnemies}`, tileSize, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText(`${state.level}`, tileSize, (conf.HEIGHT + 1.75) * tileSize)\n  ctx.fillText(`${state.player.bombRange}`, tileSize * 4, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText(`${state.player.bombs}`, tileSize * 4, (conf.HEIGHT + 1.75) * tileSize)\n  ctx.fillText(`${Math.ceil((state.freezeTimer ?? 0) / 60)}s`, tileSize * 7, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText(`${Math.ceil(state.levelTimer / 60)}s`, tileSize * 7, (conf.HEIGHT + 1.75) * tileSize)\n  ctx.fillText('+', tileSize * 11, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText('-', tileSize * 11, (conf.HEIGHT + 1.75) * tileSize)\n  ctx.fillText('P', tileSize * 14, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText('R', tileSize * 14, (conf.HEIGHT + 1.75) * tileSize)\n  ctx.fillText('M', tileSize * 17, (conf.HEIGHT + 0.75) * tileSize)\n  ctx.fillText(`${state.score}`, tileSize * 17, (conf.HEIGHT + 1.75) * tileSize)\n\n  // Render player\n  const playerImg = playerSprites[state.player.direction]\n  if (playerImg.complete) {\n    ctx.drawImage(\n      playerImg,\n      state.player.x * tileSize,\n      state.player.y * tileSize,\n      tileSize,\n      tileSize\n    )\n  }\n\n  // Render bombs\n  state.bombs.forEach(bomb => {\n    ctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize)\n  })\n  // Render explosions\n  state.explosions.forEach(explosion => {\n    ctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize)\n    \n  })\n  // Render enemies\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return\n    ctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize)\n  })\n  // Render PowerUps\n  state.powerups.forEach(p => {\n    const powerupIcon = p.type === 'bomb' ? img.powerupBombImage : (p.type === 'range' ? img.powerupRangeImage : img.powerupFreezeImage)\n    \n    const isBlinking = p.duration !== undefined && p.duration < conf.BLINKDURATION\n    const visible = !isBlinking || Math.floor(p.duration! / conf.BLINKFRAME) % 2 === 0\n    if (visible) ctx.drawImage(powerupIcon, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n  })\n\n  // Render Floating texts\n  state.floatingTexts.forEach(text => {\n    ctx.fillStyle = `rgba(150,75,0,${text.duration / conf.FLOATTEXTDURATION})` // Fade out\n    ctx.fillText(text.value, text.x + conf.TILESIZE / 2, text.y)\n  })\n\n  if (state.paused){\n    ctx.fillText('Game Paused', tileSize * 21.5, (conf.HEIGHT + 0.75) * tileSize)\n    ctx.fillText('Press P to continue', tileSize * 19, (conf.HEIGHT + 1.75) * tileSize)\n  }\n  if (state.gameOver) {\n    ctx.fillText('Game Over', tileSize * 22.5, (conf.HEIGHT + 0.75) * tileSize)\n    ctx.fillText('Press R to restart', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize)\n  }\n  if (!state.gameStarted){\n    ctx.font = `${Math.floor(tileSize * 0.4)}px 'Press Start 2P'`\n    ctx.fillText('Press any key to start', tileSize * 20, (conf.HEIGHT + 1.25) * tileSize)\n    ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`\n    return\n  }\n  if (state.victory) {\n    ctx.fillText('YOU WIN', tileSize * 23.5, (conf.HEIGHT + 0.75) * tileSize)\n    ctx.font = `${Math.floor(tileSize * 0.4)}px 'Press Start 2P'`\n    ctx.fillText('Press any key to continue', tileSize * 20, (conf.HEIGHT + 1.75) * tileSize)\n    ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`\n}\n\n  ctx.restore()\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}