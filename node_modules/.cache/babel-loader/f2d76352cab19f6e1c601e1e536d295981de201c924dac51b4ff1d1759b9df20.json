{"ast":null,"code":"var _jsxFileName = \"/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport './renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst randomInt = max => Math.floor(Math.random() * max);\n\nconst randomSign = () => Math.sign(Math.random() - 0.5);\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(() => iterate(ctx));\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const initialState = {};\n  const ref = useRef(); //   const state = useRef<State>(initialState)\n  //   const iterate = (ctx: CanvasRenderingContext2D) => {\n  //     state.current = step(state.current)\n  //     state.current.endOfGame = !endOfGame(state.current)\n  //     render(ctx)(state.current)\n  //     if (!state.current.endOfGame) requestAnimationFrame(() => iterate(ctx))\n  //   }\n  //   const onClick = (e: PointerEvent) => {\n  //     state.current = click(state.current)(e)\n  //   }\n  //   const onMove = (e: PointerEvent) => {\n  //     state.current = mouseMove(state.current)(e)\n  //   }\n  //   useEffect(() => {\n  //     if (ref.current) {\n  //       initCanvas(iterate)(ref.current)\n  //       ref.current.addEventListener('click', onClick)\n  //       ref.current.addEventListener('mousemove', onMove)\n  //     }\n  //     return () => {\n  //       ref.current.removeEventListener('click', onMove)\n  //       ref.current.removeEventListener('mousemove', onMove)\n  //     }\n  //   }, [])\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx"],"names":["useRef","randomInt","max","Math","floor","random","randomSign","sign","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","initialState","ref"],"mappings":";;;AACA,SAASA,MAAT,QAAkC,OAAlC;AAEA,OAAgB,YAAhB;;;AAEA,MAAMC,SAAS,GAAIC,GAAD,IAAiBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAnC;;AACA,MAAMI,UAAU,GAAG,MAAMH,IAAI,CAACI,IAAL,CAAUJ,IAAI,CAACE,MAAL,KAAgB,GAA1B,CAAzB;;AAEA,MAAMG,UAAU,GACbC,OAAD,IACCC,MAAD,IAA+B;AAC7B,QAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,MAAI,CAACD,GAAL,EAAU;AACVE,EAAAA,qBAAqB,CAAC,MAAMJ,OAAO,CAACE,GAAD,CAAd,CAArB;AACD,CANH;;AAQA,MAAMG,MAAM,GAAG,QAA0D;AAAA;;AAAA,MAAzD;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAyD;AACvE,QAAMC,YAAmB,GAAG,EAA5B;AAIA,QAAMC,GAAG,GAAGlB,MAAM,EAAlB,CALuE,CAMzE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,sBAAO;AAAce,IAAAA,MAAd;AAAsBC,IAAAA,KAAtB;AAA6BE,IAAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjCD;;GAAMJ,M;;KAAAA,M;AAmCN,eAAeA,MAAf","sourcesContent":["import * as conf from './conf'\nimport { useRef, useEffect } from 'react'\nimport { State } from './state'\nimport { } from './renderer'\n\nconst randomInt = (max: number) => Math.floor(Math.random() * max)\nconst randomSign = () => Math.sign(Math.random() - 0.5)\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = {\n    \n  }\n\n  const ref = useRef<any>()\n//   const state = useRef<State>(initialState)\n\n//   const iterate = (ctx: CanvasRenderingContext2D) => {\n//     state.current = step(state.current)\n//     state.current.endOfGame = !endOfGame(state.current)\n//     render(ctx)(state.current)\n//     if (!state.current.endOfGame) requestAnimationFrame(() => iterate(ctx))\n//   }\n//   const onClick = (e: PointerEvent) => {\n//     state.current = click(state.current)(e)\n//   }\n\n//   const onMove = (e: PointerEvent) => {\n//     state.current = mouseMove(state.current)(e)\n//   }\n//   useEffect(() => {\n//     if (ref.current) {\n//       initCanvas(iterate)(ref.current)\n//       ref.current.addEventListener('click', onClick)\n//       ref.current.addEventListener('mousemove', onMove)\n//     }\n//     return () => {\n//       ref.current.removeEventListener('click', onMove)\n//       ref.current.removeEventListener('mousemove', onMove)\n//     }\n//   }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}