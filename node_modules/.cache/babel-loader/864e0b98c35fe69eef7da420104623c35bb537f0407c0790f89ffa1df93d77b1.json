{"ast":null,"code":"var _jsxFileName = \"/home/munou/stl/year_2/2/cpa/projet_de_0/CPA-Bomber_Man/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as conf from './conf';\nimport { useEffect, useRef } from 'react';\nimport { generateMap, isWalkable, TileType, explodeBomb, createInitialState } from './state';\nimport { render } from './renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(() => iterate(ctx));\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const initialState = createInitialState();\n  const ref = useRef();\n  const state = useRef(initialState);\n\n  const advanceToNextLevel = () => {\n    const nextLevel = state.current.level + 1;\n\n    if (nextLevel > state.current.maxLevel) {\n      state.current.gameOver = true;\n      return;\n    }\n\n    state.current.level = nextLevel;\n    state.current.victory = false;\n    state.current.levelTimer = conf.LEVELTIME + (nextLevel - 1) * conf.ADDITIONALTIME; // Re-generate the map\n\n    state.current.gameMap.tiles = generateMap(state.current.gameMap.width, state.current.gameMap.height); // Reset player\n\n    state.current.player.x = conf.XPLAYER;\n    state.current.player.y = conf.YPLAYER;\n    state.current.player.alive = true;\n    state.current.player.bombs = conf.BOMBS;\n    state.current.player.bombRange = conf.BOMBRANGE; // Reset enemies (increase with level)\n\n    const enemyCount = conf.ENEMIES + (nextLevel - 1) * conf.ADDITIONALENEMIES;\n    const enemies = [];\n\n    while (enemies.length < enemyCount) {\n      const x = Math.floor(Math.random() * state.current.gameMap.width);\n      const y = Math.floor(Math.random() * state.current.gameMap.height);\n      const tile = state.current.gameMap.tiles[y][x];\n\n      if (tile === TileType.EMPTY && x >= conf.XENEMY && y >= conf.YENEMY) {\n        enemies.push({\n          x,\n          y,\n          direction: 'right',\n          alive: true,\n          moveEvery: 0,\n          aiType: Math.random() < conf.SMARTPROBABILITY ? 'smart' : 'random'\n        });\n      }\n    }\n\n    state.current.enemies = enemies; // Reset powerups, bombs, explosions\n\n    state.current.bombs = [];\n    state.current.explosions = [];\n    state.current.powerups = [];\n  };\n\n  const resetGame = () => {\n    const newState = createInitialState();\n    Object.keys(newState).forEach(key => {\n      state.current[key] = newState[key];\n    });\n  };\n\n  const music = new Audio('music.mp3');\n  music.loop = true;\n  music.volume = conf.VOLUME;\n  music.autoplay = false;\n\n  const handleKeyDown = e => {\n    if (e.key.toLowerCase() === 'r') {\n      resetGame();\n      music.muted = state.current.muted;\n\n      if (!music.muted) {\n        music.play().catch(err => {\n          console.warn(\"Music play blocked on restart:\", err);\n        });\n      }\n    }\n\n    if (!state.current.gameStarted) {\n      state.current.gameStarted = true;\n\n      if (!state.current.muted) {\n        music.play().catch(err => {\n          console.warn(\"Music play blocked:\", err);\n        });\n      }\n\n      const enemyCount = conf.ENEMIES;\n      const enemies = [];\n\n      while (enemies.length < enemyCount) {\n        const x = Math.floor(Math.random() * state.current.gameMap.width);\n        const y = Math.floor(Math.random() * state.current.gameMap.height);\n        const tile = state.current.gameMap.tiles[y][x];\n\n        if (tile === TileType.EMPTY && x >= conf.XENEMY && y >= conf.YENEMY) {\n          enemies.push({\n            x,\n            y,\n            direction: 'up',\n            alive: true,\n            moveEvery: 0,\n            aiType: Math.random() < conf.SMARTPROBABILITY ? 'smart' : 'random'\n          });\n        }\n      }\n\n      state.current.enemies = enemies;\n      return;\n    }\n\n    if (state.current.victory) {\n      advanceToNextLevel();\n      return;\n    }\n\n    if (state.current.gameOver) return;\n    const {\n      x,\n      y\n    } = state.current.player;\n    let newX = x;\n    let newY = y;\n\n    switch (e.key) {\n      case 'r':\n        resetGame();\n        return;\n\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up';\n        newY--;\n        break;\n\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down';\n        newY++;\n        break;\n\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left';\n        newX--;\n        break;\n\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right';\n        newX++;\n        break;\n\n      case ' ':\n      case 'Enter':\n        {\n          const {\n            x,\n            y,\n            bombs\n          } = state.current.player;\n          const tile = state.current.gameMap.tiles[y][x];\n          const alreadyExists = state.current.bombs.some(b => b.x === x && b.y === y);\n\n          if (tile !== TileType.WALL && tile !== TileType.WATER && !alreadyExists && bombs > 0) {\n            state.current.bombs.push({\n              x,\n              y,\n              range: state.current.player.bombRange,\n              timer: conf.BOMBTIME,\n              owner: 'player'\n            });\n            state.current.player.bombs--;\n          }\n\n          break;\n        }\n\n      case 'p':\n        state.current.paused = !state.current.paused;\n        break;\n\n      case 'm':\n        state.current.muted = !state.current.muted;\n        music.muted = state.current.muted;\n        break;\n\n      case '+':\n        state.current.zoom = Math.min(state.current.zoom + 0.1, 3.0);\n        break;\n\n      case '-':\n        state.current.zoom = Math.max(state.current.zoom - 0.1, 0.5);\n        break;\n    }\n\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX];\n      const isBombThere = state.current.bombs.some(b => b.x === newX && b.y === newY);\n      const isStandingOnBomb = state.current.bombs.some(b => b.x === x && b.y === y);\n      if (isBombThere && !isStandingOnBomb) return;\n\n      if (isWalkable(tile)) {\n        state.current.player.x = newX;\n        state.current.player.y = newY;\n      }\n    }\n  };\n\n  const iterate = ctx => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    if (state.current.gameStarted && !state.current.gameOver && !state.current.victory) {\n      state.current.levelTimer--;\n\n      if (state.current.levelTimer <= 0) {\n        state.current.gameOver = true;\n      }\n    }\n\n    state.current.bombs.forEach(bomb => bomb.timer--);\n    const toExplode = state.current.bombs.filter(b => b.timer <= 0);\n    state.current.bombs.forEach(b => {\n      if (b.timer > 0) b.timer--;\n      if (b.timer === 0) toExplode.push(b);\n    });\n    state.current.bombs = state.current.bombs.filter(b => !toExplode.includes(b));\n    toExplode.forEach(b => explodeBomb(b, state.current));\n    state.current.explosions = state.current.explosions.filter(e => {\n      e.duration--;\n      return e.duration > 0;\n    });\n    if (state.current.freezeTimer && state.current.freezeTimer > 0) state.current.freezeTimer--;\n\n    const tryMoveEnemy = enemy => {\n      if (!state.current.gameStarted) return;\n      if (state.current.freezeTimer && state.current.freezeTimer > 0) return;\n\n      if (enemy.moveEvery > 0) {\n        enemy.moveEvery--;\n        return;\n      }\n\n      const {\n        x,\n        y\n      } = enemy;\n      const directions = ['up', 'down', 'left', 'right'];\n      const preferredDirs = [enemy.direction, ...directions.filter(d => d !== enemy.direction)];\n      let moved = false;\n\n      for (const dir of preferredDirs) {\n        let newX = x;\n        let newY = y;\n\n        switch (dir) {\n          case 'up':\n            newY--;\n            break;\n\n          case 'down':\n            newY++;\n            break;\n\n          case 'left':\n            newX--;\n            break;\n\n          case 'right':\n            newX++;\n            break;\n        }\n\n        const isInBounds = newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height;\n        const tile = isInBounds ? state.current.gameMap.tiles[newY][newX] : TileType.WALL;\n        const isBlocked = !isWalkable(tile) || state.current.bombs.some(b => b.x === newX && b.y === newY);\n\n        if (!isBlocked) {\n          enemy.x = newX;\n          enemy.y = newY;\n          enemy.direction = dir;\n          moved = true;\n          break;\n        }\n      }\n\n      if (!moved && Math.random() < conf.RANDOMPROBABILITY) {\n        const dirs = ['up', 'down', 'left', 'right'];\n        enemy.direction = dirs[Math.floor(Math.random() * dirs.length)];\n      }\n\n      enemy.moveEvery = conf.ENEMYSPEED;\n    }; // AI generated\n\n\n    function findNextStep(map, start, goal) {\n      const visited = new Set();\n      const queue = [{\n        x: start.x,\n        y: start.y,\n        path: []\n      }];\n      const directions = [{\n        x: 0,\n        y: -1\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: 1,\n        y: 0\n      }];\n\n      while (queue.length > 0) {\n        const {\n          x,\n          y,\n          path\n        } = queue.shift();\n        const key = `${x},${y}`;\n        if (visited.has(key)) continue;\n        visited.add(key);\n\n        if (x === goal.x && y === goal.y) {\n          var _path$;\n\n          return (_path$ = path[0]) !== null && _path$ !== void 0 ? _path$ : null;\n        }\n\n        for (const d of directions) {\n          var _map$ny, _map$ny2;\n\n          const nx = x + d.x;\n          const ny = y + d.y;\n          const bombThere = state.current.bombs.some(b => b.x === x && b.y === y);\n\n          if ((((_map$ny = map[ny]) === null || _map$ny === void 0 ? void 0 : _map$ny[nx]) === TileType.EMPTY || ((_map$ny2 = map[ny]) === null || _map$ny2 === void 0 ? void 0 : _map$ny2[nx]) === TileType.WATER) && !bombThere) {\n            queue.push({\n              x: nx,\n              y: ny,\n              path: [...path, {\n                x: nx,\n                y: ny\n              }]\n            });\n          }\n        }\n      }\n\n      return null;\n    }\n\n    state.current.enemies.forEach(enemy => {\n      if (!enemy.alive || state.current.freezeTimer && state.current.freezeTimer > 0) return;\n\n      if (enemy.aiType === 'smart') {\n        enemy.moveEvery++;\n        if (enemy.moveEvery < conf.ENEMYSPEED) return;\n        enemy.moveEvery = 0;\n        const step = findNextStep(state.current.gameMap.tiles, enemy, state.current.player);\n        const bombThere = step && state.current.bombs.some(b => b.x === step.x && b.y === step.y);\n\n        if (step && bombThere) {\n          enemy.x = step.x;\n          enemy.y = step.y;\n        } else {\n          const directions = ['up', 'down', 'left', 'right'].sort(() => Math.random() - 0.5);\n\n          for (const dir of directions) {\n            var _state$current$gameMa;\n\n            const [dx, dy] = dir === 'up' ? [0, -1] : dir === 'down' ? [0, 1] : dir === 'left' ? [-1, 0] : [1, 0];\n            const tx = enemy.x + dx;\n            const ty = enemy.y + dy;\n            const tile = (_state$current$gameMa = state.current.gameMap.tiles[ty]) === null || _state$current$gameMa === void 0 ? void 0 : _state$current$gameMa[tx];\n\n            if (tile === TileType.EMPTY || tile === TileType.WATER) {\n              enemy.x = tx;\n              enemy.y = ty;\n              break;\n            }\n          }\n        }\n      } else tryMoveEnemy(enemy);\n    });\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive && state.current.player.alive && state.current.player.x === enemy.x && state.current.player.y === enemy.y) {\n        state.current.player.alive = false;\n        state.current.gameOver = true;\n      }\n    });\n    state.current.powerups = state.current.powerups.map(p => ({ ...p,\n      duration: p.duration - 1\n    })).filter(p => p.duration > 0);\n    state.current.powerups = state.current.powerups.filter(p => {\n      if (p.x === state.current.player.x && p.y === state.current.player.y) {\n        if (p.type === 'bomb') state.current.player.bombs++;\n        if (p.type === 'range') state.current.player.bombRange++;\n        if (p.type === 'freeze') state.current.freezeTimer = conf.FREEZETIMER;\n        state.current.score += conf.POWERUPSCORE;\n        state.current.floatingTexts.push({\n          x: p.x * conf.TILESIZE,\n          y: p.y * conf.TILESIZE,\n          value: `+${conf.POWERUPSCORE}`,\n          duration: conf.FLOATTEXTDURATION\n        });\n        return false;\n      }\n\n      return true;\n    });\n    state.current.floatingTexts = state.current.floatingTexts.map(text => ({ ...text,\n      y: text.y - 1,\n      duration: text.duration - 1\n    })).filter(text => text.duration > 0);\n\n    if (!state.current.victory && state.current.enemies.length > 0 && state.current.enemies.every(e => !e.alive)) {\n      state.current.victory = true;\n      state.current.score += Math.ceil(state.current.levelTimer / conf.SECOND) * conf.TIMESCORE;\n      state.current.levelTimer = 0;\n    } // const loop = () => {\n    //   requestAnimationFrame(loop)\n    //   if(!state.current.paused) iterate(ctx)\n    //   render(ctx)(state.current)\n    // }\n\n\n    if (!state.current.paused) {\n      requestAnimationFrame(() => iterate(ctx));\n    } else {\n      const resume = event => {\n        if (event.key.toLowerCase() === 'p') {\n          state.current.paused = false;\n          window.removeEventListener('keydown', resume);\n          requestAnimationFrame(() => iterate(ctx));\n        }\n      };\n\n      window.addEventListener('keydown', resume);\n    } // Render the game state\n\n\n    render(ctx)(state.current);\n  };\n\n  useEffect(() => {\n    const onWheel = e => {\n      if (!state.current.gameStarted) return;\n      const zoomFactor = conf.ZOOMFACTOR;\n      if (e.deltaY < 0) state.current.zoom *= zoomFactor;else state.current.zoom /= zoomFactor;\n      state.current.zoom = Math.max(0.5, Math.min(3, state.current.zoom));\n    };\n\n    if (ref.current) {\n      initCanvas(iterate)(ref.current);\n      window.addEventListener('keydown', handleKeyDown);\n      ref.current.addEventListener('wheel', onWheel);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      ref.current.removeEventListener('wheel', onWheel);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"Gpm0P4FfDB25XYapIJctmdb7SaA=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/CPA-Bomber_Man/src/components/canvas/index.tsx"],"names":["conf","useEffect","useRef","generateMap","isWalkable","TileType","explodeBomb","createInitialState","render","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","initialState","ref","state","advanceToNextLevel","nextLevel","current","level","maxLevel","gameOver","victory","levelTimer","LEVELTIME","ADDITIONALTIME","gameMap","tiles","player","x","XPLAYER","y","YPLAYER","alive","bombs","BOMBS","bombRange","BOMBRANGE","enemyCount","ENEMIES","ADDITIONALENEMIES","enemies","length","Math","floor","random","tile","EMPTY","XENEMY","YENEMY","push","direction","moveEvery","aiType","SMARTPROBABILITY","explosions","powerups","resetGame","newState","Object","keys","forEach","key","music","Audio","loop","volume","VOLUME","autoplay","handleKeyDown","e","toLowerCase","muted","play","catch","err","console","warn","gameStarted","newX","newY","alreadyExists","some","b","WALL","WATER","range","timer","BOMBTIME","owner","paused","zoom","min","max","isBombThere","isStandingOnBomb","clearRect","bomb","toExplode","filter","includes","duration","freezeTimer","tryMoveEnemy","enemy","directions","preferredDirs","d","moved","dir","isInBounds","isBlocked","RANDOMPROBABILITY","dirs","ENEMYSPEED","findNextStep","map","start","goal","visited","Set","queue","path","shift","has","add","nx","ny","bombThere","step","sort","dx","dy","tx","ty","p","type","FREEZETIMER","score","POWERUPSCORE","floatingTexts","TILESIZE","value","FLOATTEXTDURATION","text","every","ceil","SECOND","TIMESCORE","resume","event","window","removeEventListener","addEventListener","onWheel","zoomFactor","ZOOMFACTOR","deltaY"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { useEffect, useRef } from 'react'\nimport { generateMap, isWalkable, State, TileType, explodeBomb, Enemy, createInitialState} from './state'\nimport { render } from './renderer'\nimport { Dirent } from 'fs'\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = createInitialState()\n\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n\n  const advanceToNextLevel = () => {\n    const nextLevel = state.current.level + 1\n  \n    if (nextLevel > state.current.maxLevel) {\n      state.current.gameOver = true\n      return\n    }\n  \n    state.current.level = nextLevel\n    state.current.victory = false\n    state.current.levelTimer = conf.LEVELTIME + (nextLevel - 1) * conf.ADDITIONALTIME\n  \n    // Re-generate the map\n    state.current.gameMap.tiles = generateMap(state.current.gameMap.width, state.current.gameMap.height)\n  \n    // Reset player\n    state.current.player.x = conf.XPLAYER\n    state.current.player.y = conf.YPLAYER\n    state.current.player.alive = true\n    state.current.player.bombs = conf.BOMBS\n    state.current.player.bombRange = conf.BOMBRANGE\n  \n    // Reset enemies (increase with level)\n    const enemyCount = conf.ENEMIES + (nextLevel - 1) * conf.ADDITIONALENEMIES\n    const enemies = []\n    while(enemies.length < enemyCount) {\n      const x = Math.floor(Math.random() * state.current.gameMap.width)\n      const y = Math.floor(Math.random() * state.current.gameMap.height)\n      const tile = state.current.gameMap.tiles[y][x]\n\n      if (tile === TileType.EMPTY && x >= conf.XENEMY && y >= conf.YENEMY) {\n        enemies.push({\n          x,\n          y,\n          direction: 'right' as 'right',\n          alive: true,\n          moveEvery: 0,\n          aiType: Math.random() < conf.SMARTPROBABILITY ? 'smart' : 'random'\n        })\n      }\n    }\n    \n    state.current.enemies = enemies as Enemy[]\n  \n    // Reset powerups, bombs, explosions\n    state.current.bombs = []\n    state.current.explosions = []\n    state.current.powerups = []\n  }\n  \n\n  const resetGame = () => {\n    const newState = createInitialState()\n    Object.keys(newState).forEach(key => {\n      (state.current as any)[key] = (newState as any)[key]\n    })\n  }\n\n  const music = new Audio('music.mp3')\n  music.loop = true\n  music.volume = conf.VOLUME\n  music.autoplay = false\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n\n    if (e.key.toLowerCase() === 'r') {\n      resetGame()\n      music.muted = state.current.muted\n      if (!music.muted) {\n        music.play().catch((err) => {\n          console.warn(\"Music play blocked on restart:\", err)\n        })\n      }\n    }\n\n    if (!state.current.gameStarted) {\n      state.current.gameStarted = true\n\n      if (!state.current.muted) {\n        music.play().catch((err) => {\n          console.warn(\"Music play blocked:\", err)\n        })\n      }\n\n      const enemyCount = conf.ENEMIES\n      const enemies = []\n\n      while(enemies.length < enemyCount) {\n        const x = Math.floor(Math.random() * state.current.gameMap.width)\n        const y = Math.floor(Math.random() * state.current.gameMap.height)\n        const tile = state.current.gameMap.tiles[y][x]\n  \n        if (tile === TileType.EMPTY && x >= conf.XENEMY && y >= conf.YENEMY) {\n          enemies.push({\n            x,\n            y,\n            direction: 'up' as 'up',\n            alive: true,\n            moveEvery: 0,\n            aiType: Math.random() < conf.SMARTPROBABILITY ? 'smart' as 'smart' : 'random' as 'random'\n          })\n        }\n      }\n\n      state.current.enemies = enemies\n      return\n    }\n\n    if (state.current.victory) {\n      advanceToNextLevel()\n      return\n    }\n\n    if (state.current.gameOver) return\n\n    const {x, y} = state.current.player\n    let newX = x\n    let newY = y\n    switch (e.key) {\n      case 'r':\n        resetGame()\n        return\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up'\n        newY--\n        break\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down'\n        newY++\n        break\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left'\n        newX--\n        break\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right'\n        newX++\n        break\n      case ' ':\n      case 'Enter': {\n        const {x, y, bombs} = state.current.player\n        const tile = state.current.gameMap.tiles[y][x]\n        const alreadyExists = state.current.bombs.some(b => b.x === x && b.y === y)\n        if (tile !== TileType.WALL && tile !== TileType.WATER && !alreadyExists && bombs > 0) {\n          state.current.bombs.push({\n            x,\n            y,\n            range: state.current.player.bombRange,\n            timer: conf.BOMBTIME,\n            owner: 'player',\n          })\n          state.current.player.bombs--\n        }\n        break\n      }\n      case 'p':\n        state.current.paused = !state.current.paused\n        break\n      case 'm':\n        state.current.muted = !state.current.muted\n        music.muted = state.current.muted\n        break\n      case '+':\n        state.current.zoom = Math.min(state.current.zoom + 0.1, 3.0)\n        break\n      case '-':\n        state.current.zoom = Math.max(state.current.zoom - 0.1, 0.5)\n        break\n    }\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX]\n\n      const isBombThere = state.current.bombs.some(b => b.x === newX && b.y === newY)\n      const isStandingOnBomb = state.current.bombs.some(b => b.x === x && b.y === y)\n      if (isBombThere && !isStandingOnBomb) return\n      if (isWalkable(tile)) {\n        state.current.player.x = newX\n        state.current.player.y = newY\n      }\n    }\n  }\n\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n\n    if (state.current.gameStarted && !state.current.gameOver && !state.current.victory){\n      state.current.levelTimer--\n      if (state.current.levelTimer <= 0){\n        state.current.gameOver = true\n      }\n    }\n\n    state.current.bombs.forEach(bomb => bomb.timer--)\n    const toExplode = state.current.bombs.filter(b => b.timer <= 0)\n\n    state.current.bombs.forEach(b => {\n      if (b.timer > 0) b.timer--\n      if (b.timer === 0) toExplode.push(b)\n    })\n\n    state.current.bombs = state.current.bombs.filter(b => !toExplode.includes(b))\n    toExplode.forEach(b => explodeBomb(b,state.current))\n\n    state.current.explosions = state.current.explosions.filter(e => {\n      e.duration--\n      return e.duration > 0\n    })\n\n    if (state.current.freezeTimer && state.current.freezeTimer > 0) state.current.freezeTimer--\n\n    const tryMoveEnemy = (enemy : Enemy) => {\n      if (!state.current.gameStarted) return\n      if (state.current.freezeTimer && state.current.freezeTimer > 0) return\n\n      if (enemy.moveEvery > 0){\n        enemy.moveEvery--\n        return\n      }\n\n      const {x, y} = enemy\n      const directions: Enemy['direction'][] = ['up', 'down', 'left', 'right']\n\n      const preferredDirs = [enemy.direction, ...directions.filter(d => d !== enemy.direction)]\n\n      let moved = false\n\n      for (const dir of preferredDirs) {\n        let newX = x\n        let newY = y\n        switch (dir) {\n          case 'up':\n            newY--\n            break\n          case 'down':\n            newY++\n            break\n          case 'left':\n            newX--\n            break\n          case 'right':\n            newX++\n            break\n        }\n\n        const isInBounds = newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height\n        const tile = isInBounds ? state.current.gameMap.tiles[newY][newX] : TileType.WALL\n        const isBlocked = !isWalkable(tile) || state.current.bombs.some(b => b.x === newX && b.y === newY)\n\n        if (!isBlocked) {\n          enemy.x = newX\n          enemy.y = newY\n          enemy.direction = dir\n          moved = true\n          break\n        }\n      }\n\n      if (!moved && Math.random() < conf.RANDOMPROBABILITY){\n        const dirs: Enemy['direction'][] = ['up', 'down', 'left', 'right']\n        enemy.direction = dirs[Math.floor(Math.random() * dirs.length)]\n      }\n      enemy.moveEvery = conf.ENEMYSPEED\n    }\n\n    // AI generated\n    function findNextStep(map: TileType[][], start: {x: number, y: number}, goal: {x: number, y: number}): {x: number, y: number} | null {\n      const visited = new Set()\n      const queue: {x: number, y: number, path: {x: number, y: number}[]}[] = [{ x: start.x, y: start.y, path: [] }]\n      const directions = [\n        { x: 0, y: -1 },\n        { x: 0, y: 1 },\n        { x: -1, y: 0 },\n        { x: 1, y: 0 }, \n      ]\n    \n      while (queue.length > 0) {\n        const { x, y, path } = queue.shift()!\n        const key = `${x},${y}`\n        if (visited.has(key)) continue\n        visited.add(key)\n    \n        if (x === goal.x && y === goal.y) {\n          return path[0] ?? null\n        }\n    \n        for (const d of directions) {\n          const nx = x + d.x\n          const ny = y + d.y\n          const bombThere = state.current.bombs.some(b => b.x === x && b.y === y)\n          if ((map[ny]?.[nx] === TileType.EMPTY || map[ny]?.[nx] === TileType.WATER) && !bombThere) {\n            queue.push({ x: nx, y: ny, path: [...path, { x: nx, y: ny }] })\n          }\n        }\n      }\n    \n      return null\n    }\n    \n\n    state.current.enemies.forEach(enemy => {\n      if (!enemy.alive || (state.current.freezeTimer && state.current.freezeTimer > 0)) return\n      if (enemy.aiType === 'smart') {\n        enemy.moveEvery++\n        if (enemy.moveEvery < conf.ENEMYSPEED) return\n        enemy.moveEvery = 0\n        const step = findNextStep(state.current.gameMap.tiles, enemy, state.current.player)\n        const bombThere = step && state.current.bombs.some(b => b.x === step.x && b.y === step.y)\n        if (step && bombThere) {\n          enemy.x = step.x\n          enemy.y = step.y\n        }\n        else{\n          const directions = ['up', 'down', 'left', 'right'].sort(() => Math.random() - 0.5)\n          for (const dir of directions) {\n            const [dx, dy] = dir === 'up' ? [0, -1]\n                          : dir === 'down' ? [0, 1]\n                          : dir === 'left' ? [-1, 0]\n                          : [1, 0]\n            const tx = enemy.x + dx\n            const ty = enemy.y + dy\n            const tile = state.current.gameMap.tiles[ty]?.[tx]\n            if (tile === TileType.EMPTY || tile === TileType.WATER) {\n              enemy.x = tx\n              enemy.y = ty\n              break\n            }\n          }\n        }\n      }\n      else tryMoveEnemy(enemy)\n    })\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive && state.current.player.alive && state.current.player.x === enemy.x && state.current.player.y === enemy.y) {\n        state.current.player.alive = false\n        state.current.gameOver = true\n      }\n    })\n\n    state.current.powerups = state.current.powerups.map(p => ({ ...p, duration: p.duration! - 1 })).filter(p => p.duration! > 0)\n    \n    state.current.powerups = state.current.powerups.filter(p => {\n      if (p.x === state.current.player.x && p.y === state.current.player.y) {\n        if (p.type === 'bomb') state.current.player.bombs++\n        if (p.type === 'range') state.current.player.bombRange++\n        if (p.type === 'freeze') state.current.freezeTimer = conf.FREEZETIMER\n\n        state.current.score += conf.POWERUPSCORE\n        state.current.floatingTexts.push({\n          x: p.x * conf.TILESIZE,\n          y: p.y * conf.TILESIZE,\n          value: `+${conf.POWERUPSCORE}`,\n          duration: conf.FLOATTEXTDURATION\n        })\n        return false\n      }\n      return true\n    })\n    state.current.floatingTexts = state.current.floatingTexts.map(text => ({...text, y: text.y - 1, duration: text.duration - 1})).filter(text => text.duration > 0)\n    \n\n    if (!state.current.victory && state.current.enemies.length > 0 && state.current.enemies.every(e => !e.alive)) {\n      state.current.victory = true\n      state.current.score += Math.ceil(state.current.levelTimer / conf.SECOND) * conf.TIMESCORE\n      state.current.levelTimer = 0\n    }\n\n    // const loop = () => {\n    //   requestAnimationFrame(loop)\n    //   if(!state.current.paused) iterate(ctx)\n    //   render(ctx)(state.current)\n      \n    // }\n\n    if (!state.current.paused){\n      requestAnimationFrame(() => iterate(ctx))\n    } \n    else {\n      const resume = (event : KeyboardEvent) => {\n        if (event.key.toLowerCase() === 'p') {\n          state.current.paused = false\n          window.removeEventListener('keydown', resume)\n          requestAnimationFrame(() => iterate(ctx))\n        }\n      }\n      window.addEventListener('keydown', resume)\n    }\n    // Render the game state\n    render(ctx)(state.current)\n  }\n\n  useEffect(() => {\n    const onWheel = (e: WheelEvent) => {\n      if (!state.current.gameStarted) return\n      const zoomFactor = conf.ZOOMFACTOR\n      if (e.deltaY < 0) state.current.zoom *= zoomFactor\n      else state.current.zoom /= zoomFactor\n      state.current.zoom = Math.max(0.5, Math.min(3, state.current.zoom))\n    }\n    if (ref.current) {\n      initCanvas(iterate)(ref.current)\n      window.addEventListener('keydown', handleKeyDown)      \n      ref.current.addEventListener('wheel', onWheel)\n    }\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n      ref.current.removeEventListener('wheel', onWheel)\n    }\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}