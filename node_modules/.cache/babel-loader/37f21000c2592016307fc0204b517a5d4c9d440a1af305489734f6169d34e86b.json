{"ast":null,"code":"import * as conf from './conf';\nimport { playerSprites } from './images';\nimport * as img from './images';\nimport { TileType } from './state';\nexport const render = ctx => state => {\n  const tileSize = conf.TILESIZE;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x];\n      const px = x * tileSize;\n      const py = y * tileSize;\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.WATER:\n          ctx.fillStyle = 'blue';\n          ctx.fillRect(px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EMPTY:\n          ctx.fillStyle = 'gray';\n          ctx.fillRect(px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EXPLOSION:\n          ctx.fillStyle = 'red';\n          ctx.fillRect(px, py, tileSize, tileSize);\n          break;\n      }\n    }\n  } // Render player\n\n\n  const playerImg = playerSprites[state.player.direction];\n\n  if (playerImg.complete) {\n    ctx.drawImage(playerImg, state.player.x * tileSize, state.player.y * tileSize, tileSize, tileSize);\n  } // Render bombs\n\n\n  state.bombs.forEach(bomb => {\n    ctx.fillStyle = 'yellow';\n    ctx.fillRect(bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize);\n  }); // Render explosions\n\n  state.explosions.forEach(explosion => {\n    ctx.fillStyle = 'red';\n    ctx.fillRect(explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize);\n  }); // Render enemies\n\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return;\n    ctx.fillStyle = 'white';\n    ctx.fillRect(enemy.x * tileSize + 5, enemy.y * tileSize + 5, tileSize - 10, tileSize - 10);\n  }); // Render PowerUps\n\n  state.powerups.forEach(p => {\n    if (p.type === 'bomb') ctx.fillStyle = 'pink';else if (p.type === 'range') ctx.fillStyle = 'purple';else if (p.type === 'freeze') ctx.fillStyle = 'cyan';\n    ctx.fillRect(p.x * tileSize + 5, p.y * tileSize + 5, tileSize - 10, tileSize - 10);\n  });\n\n  if (state.gameOver) {\n    ctx.fillStyle = 'black';\n    ctx.font = '30px Arial';\n    ctx.fillText('Game Over', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2);\n  }\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/renderer.ts"],"names":["conf","playerSprites","img","TileType","render","ctx","state","tileSize","TILESIZE","clearRect","canvas","width","height","y","gameMap","x","tile","tiles","px","py","WALL","drawImage","wallImage","BREAKABLE","breakableImage","WATER","fillStyle","fillRect","EMPTY","EXPLOSION","playerImg","player","direction","complete","bombs","forEach","bomb","explosions","explosion","enemies","enemy","alive","powerups","p","type","gameOver","font","fillText"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { playerSprites } from './images'\nimport * as img from './images'\nimport { TileType, State } from './state'\n\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  const tileSize = conf.TILESIZE\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x]\n\n      const px = x * tileSize\n      const py = y * tileSize\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize,tileSize)\n          break\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize,tileSize)\n          break\n        case TileType.WATER:\n          ctx.fillStyle = 'blue'\n          ctx.fillRect(px, py, tileSize, tileSize)\n          break\n        case TileType.EMPTY:\n          ctx.fillStyle = 'gray'\n          ctx.fillRect(px, py, tileSize, tileSize)\n          break\n        case TileType.EXPLOSION:\n          ctx.fillStyle = 'red'\n          ctx.fillRect(px, py, tileSize, tileSize)\n\n          break\n      }\n    }\n  }\n\n  // Render player\n  const playerImg = playerSprites[state.player.direction]\n  if (playerImg.complete) {\n    ctx.drawImage(\n      playerImg,\n      state.player.x * tileSize,\n      state.player.y * tileSize,\n      tileSize,\n      tileSize\n    )\n  }\n\n  // Render bombs\n  state.bombs.forEach(bomb => {\n    ctx.fillStyle = 'yellow'\n    ctx.fillRect(bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize)\n  })\n  // Render explosions\n  state.explosions.forEach(explosion => {\n    ctx.fillStyle = 'red'\n    ctx.fillRect(explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize)\n  })\n  // Render enemies\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return\n    ctx.fillStyle = 'white'\n    ctx.fillRect(enemy.x * tileSize + 5, enemy.y * tileSize + 5, tileSize - 10, tileSize - 10)\n  })\n  // Render PowerUps\n  state.powerups.forEach(p => {\n    if (p.type === 'bomb') ctx.fillStyle = 'pink'\n    else if (p.type === 'range') ctx.fillStyle = 'purple'\n    else if (p.type === 'freeze') ctx.fillStyle = 'cyan'\n    ctx.fillRect(p.x * tileSize + 5, p.y * tileSize + 5, tileSize - 10, tileSize - 10)\n  })\n  if (state.gameOver) {\n    ctx.fillStyle = 'black'\n    ctx.font = '30px Arial'\n    ctx.fillText('Game Over', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2)\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}