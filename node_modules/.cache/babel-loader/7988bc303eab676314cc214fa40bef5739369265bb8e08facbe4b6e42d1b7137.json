{"ast":null,"code":"var _jsxFileName = \"/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport { generateMap } from './state';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(() => iterate(ctx));\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const initialState = {\n    player: {\n      x: 1,\n      y: 1,\n      alive: true,\n      bombs: 1,\n      bombRange: 2\n    },\n    bombs: [],\n    explosions: [],\n    enemies: [],\n    gameMap: {\n      width: 13,\n      height: 11,\n      tiles: generateMap(13, 11)\n    },\n    gameOver: false,\n    victory: false\n  };\n  const ref = useRef();\n\n  const iterate = ctx => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Render the game state\n    // render(ctx)(state.current)\n\n    requestAnimationFrame(() => iterate(ctx));\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current);\n    }\n\n    return () => {};\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx"],"names":["useEffect","useRef","generateMap","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","initialState","player","x","y","alive","bombs","bombRange","explosions","enemies","gameMap","tiles","gameOver","victory","ref","clearRect","current"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,WAAT,QAAmC,SAAnC;;;AAEA,MAAMC,UAAU,GACbC,OAAD,IACCC,MAAD,IAA+B;AAC7B,QAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,MAAI,CAACD,GAAL,EAAU;AACVE,EAAAA,qBAAqB,CAAC,MAAMJ,OAAO,CAACE,GAAD,CAAd,CAArB;AACD,CANH;;AAQA,MAAMG,MAAM,GAAG,QAA0D;AAAA;;AAAA,MAAzD;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAyD;AACvE,QAAMC,YAAmB,GAAG;AAC1BC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE,CADG;AAENC,MAAAA,CAAC,EAAE,CAFG;AAGNC,MAAAA,KAAK,EAAE,IAHD;AAINC,MAAAA,KAAK,EAAE,CAJD;AAKNC,MAAAA,SAAS,EAAE;AALL,KADkB;AAQ1BD,IAAAA,KAAK,EAAE,EARmB;AAS1BE,IAAAA,UAAU,EAAE,EATc;AAU1BC,IAAAA,OAAO,EAAE,EAViB;AAW1BC,IAAAA,OAAO,EAAE;AACPV,MAAAA,KAAK,EAAE,EADA;AAEPD,MAAAA,MAAM,EAAE,EAFD;AAGPY,MAAAA,KAAK,EAAEpB,WAAW,CAAC,EAAD,EAAK,EAAL;AAHX,KAXiB;AAgB1BqB,IAAAA,QAAQ,EAAE,KAhBgB;AAiB1BC,IAAAA,OAAO,EAAE;AAjBiB,GAA5B;AAoBA,QAAMC,GAAG,GAAGxB,MAAM,EAAlB;;AAEA,QAAMG,OAAO,GAAIE,GAAD,IAAmC;AACjDA,IAAAA,GAAG,CAACoB,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBpB,GAAG,CAACD,MAAJ,CAAWM,KAA/B,EAAsCL,GAAG,CAACD,MAAJ,CAAWK,MAAjD,EADiD,CAEjD;AACA;;AACAF,IAAAA,qBAAqB,CAAC,MAAMJ,OAAO,CAACE,GAAD,CAAd,CAArB;AACD,GALD;;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,GAAG,CAACE,OAAR,EAAiB;AACfxB,MAAAA,UAAU,CAACC,OAAD,CAAV,CAAoBqB,GAAG,CAACE,OAAxB;AACD;;AACD,WAAO,MAAM,CAAE,CAAf;AACD,GALQ,EAKN,EALM,CAAT;AAMA,sBAAO;AAAcjB,IAAAA,MAAd;AAAsBC,IAAAA,KAAtB;AAA6Bc,IAAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArCD;;GAAMhB,M;;KAAAA,M;AAuCN,eAAeA,MAAf","sourcesContent":["import { useEffect, useRef } from 'react'\nimport { generateMap, State } from './state'\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = {\n    player: {\n      x: 1,\n      y: 1,\n      alive: true,\n      bombs: 1,\n      bombRange: 2,\n    },\n    bombs: [],\n    explosions: [],\n    enemies: [],\n    gameMap: {\n      width: 13,\n      height: 11,\n      tiles: generateMap(13, 11),\n    },\n    gameOver: false,\n    victory: false\n  }\n\n  const ref = useRef<any>()\n\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    // Render the game state\n    // render(ctx)(state.current)\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current)\n    }\n    return () => {}\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}