{"ast":null,"code":"import * as conf from './conf';\nimport { playerSprites } from './images';\nimport * as img from './images';\nimport { TileType } from './state';\nexport const render = ctx => state => {\n  var _state$freezeTimer;\n\n  const tileSize = conf.TILESIZE;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x];\n      const px = x * tileSize;\n      const py = y * tileSize;\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.WATER:\n          ctx.drawImage(img.waterImage, px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EMPTY:\n          ctx.fillStyle = '#dedede';\n          ctx.fillRect(px, py, tileSize, tileSize);\n          break;\n\n        case TileType.EXPLOSION:\n          ctx.drawImage(img.explosionImage, px, py, tileSize, tileSize);\n          break;\n      }\n    }\n  }\n\n  const aliveEnemies = state.enemies.filter(enemy => enemy.alive).length; // Afficher Stats\n\n  ctx.drawImage(img.timeImage, 0, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.levelImage, 0, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.enemyImage, tileSize * 5, conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupRangeImage, tileSize * (conf.WIDTH - 6), conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupBombImage, tileSize * (conf.WIDTH - 6), (conf.HEIGHT + 1) * tileSize, tileSize, tileSize);\n  ctx.drawImage(img.powerupFreezeImage, tileSize * (conf.WIDTH - 3), conf.HEIGHT * tileSize, tileSize, tileSize);\n  ctx.fillStyle = 'brown';\n  ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`;\n  ctx.fillText(` : ${Math.ceil(state.levelTimer / 20)}s`, tileSize, (conf.HEIGHT + 0.65) * tileSize);\n  ctx.fillText(` : ${state.level}`, tileSize, (conf.HEIGHT + 1.65) * tileSize);\n  ctx.fillText(` : ${aliveEnemies}`, tileSize * 4, (conf.HEIGHT + 0.65) * tileSize);\n  ctx.fillText(` : ${state.player.bombRange}`, tileSize * (conf.WIDTH - 5), (conf.HEIGHT + 0.65) * tileSize);\n  ctx.fillText(` : ${state.player.bombs}`, tileSize * (conf.WIDTH - 5), (conf.HEIGHT + 1.65) * tileSize);\n  ctx.fillText(` : ${Math.ceil(((_state$freezeTimer = state.freezeTimer) !== null && _state$freezeTimer !== void 0 ? _state$freezeTimer : 0) / 60)}s`, tileSize * (conf.WIDTH - 2), (conf.HEIGHT + 0.65) * tileSize); // Render player\n\n  const playerImg = playerSprites[state.player.direction];\n\n  if (playerImg.complete) {\n    ctx.drawImage(playerImg, state.player.x * tileSize, state.player.y * tileSize, tileSize, tileSize);\n  } // Render bombs\n\n\n  state.bombs.forEach(bomb => {\n    ctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize);\n  }); // Render explosions\n\n  state.explosions.forEach(explosion => {\n    ctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize);\n  }); // Render enemies\n\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return;\n    ctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize);\n  }); // Render PowerUps\n\n  state.powerups.forEach(p => {\n    if (p.type === 'bomb') ctx.drawImage(img.powerupBombImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize);else if (p.type === 'range') ctx.drawImage(img.powerupRangeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize);else if (p.type === 'freeze') ctx.drawImage(img.powerupFreezeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize);\n  });\n\n  if (state.gameOver) {\n    ctx.fillStyle = 'black';\n    ctx.font = '30px Arial';\n    ctx.fillText('Game Over', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2);\n  }\n\n  if (!state.gameStarted) {\n    ctx.fillStyle = 'black';\n    ctx.font = '30px Arial';\n    ctx.fillText('Press any key to start', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2);\n    return;\n  }\n\n  if (state.victory) {\n    ctx.fillStyle = 'gold';\n    ctx.font = '50px Arial';\n    ctx.fillText('YOU WIN', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2);\n  }\n};","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/renderer.ts"],"names":["conf","playerSprites","img","TileType","render","ctx","state","tileSize","TILESIZE","clearRect","canvas","width","height","y","gameMap","x","tile","tiles","px","py","WALL","drawImage","wallImage","BREAKABLE","breakableImage","WATER","waterImage","EMPTY","fillStyle","fillRect","EXPLOSION","explosionImage","aliveEnemies","enemies","filter","enemy","alive","length","timeImage","HEIGHT","levelImage","enemyImage","powerupRangeImage","WIDTH","powerupBombImage","powerupFreezeImage","font","Math","floor","fillText","ceil","levelTimer","level","player","bombRange","bombs","freezeTimer","playerImg","direction","complete","forEach","bomb","bombImage","explosions","explosion","powerups","p","type","gameOver","gameStarted","victory"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { playerSprites } from './images'\nimport * as img from './images'\nimport { TileType, State } from './state'\n\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  const tileSize = conf.TILESIZE\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  \n  for (let y = 0; y < state.gameMap.height; y++) {\n    for (let x = 0; x < state.gameMap.width; x++) {\n      const tile = state.gameMap.tiles[y][x]\n\n      const px = x * tileSize\n      const py = y * tileSize\n\n      switch (tile) {\n        case TileType.WALL:\n          ctx.drawImage(img.wallImage, px, py, tileSize, tileSize)\n          break\n        case TileType.BREAKABLE:\n          ctx.drawImage(img.breakableImage, px, py, tileSize, tileSize)\n          break\n        case TileType.WATER:\n          ctx.drawImage(img.waterImage, px, py, tileSize, tileSize)\n          break\n        case TileType.EMPTY:\n          ctx.fillStyle = '#dedede'\n          ctx.fillRect(px, py, tileSize, tileSize)\n          break\n        case TileType.EXPLOSION:\n          ctx.drawImage(img.explosionImage, px, py, tileSize, tileSize)\n          break\n      }\n    }\n  }\n\n  const aliveEnemies = state.enemies.filter(enemy => enemy.alive).length\n\n  // Afficher Stats\n  ctx.drawImage(img.timeImage, 0, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.levelImage, 0, (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.enemyImage, tileSize * 5, (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.powerupRangeImage, tileSize * (conf.WIDTH - 6), (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.powerupBombImage, tileSize * (conf.WIDTH - 6), (conf.HEIGHT + 1) * tileSize, tileSize, tileSize)\n  ctx.drawImage(img.powerupFreezeImage, tileSize * (conf.WIDTH - 3), (conf.HEIGHT) * tileSize, tileSize, tileSize)\n  \n  ctx.fillStyle = 'brown'\n  ctx.font = `${Math.floor(tileSize * 0.5)}px 'Press Start 2P'`\n\n  ctx.fillText(` : ${Math.ceil(state.levelTimer / 20)}s`, tileSize, (conf.HEIGHT + 0.65) * tileSize)\n  ctx.fillText(` : ${state.level}`, tileSize, (conf.HEIGHT + 1.65) * tileSize)\n  ctx.fillText(` : ${aliveEnemies}`, tileSize * 4, (conf.HEIGHT + 0.65) * tileSize)\n  ctx.fillText(` : ${state.player.bombRange}`, tileSize * (conf.WIDTH - 5), (conf.HEIGHT + 0.65) * tileSize)\n  ctx.fillText(` : ${state.player.bombs}`, tileSize * (conf.WIDTH - 5), (conf.HEIGHT + 1.65) * tileSize)\n  ctx.fillText(` : ${Math.ceil((state.freezeTimer ?? 0) / 60)}s`, tileSize * (conf.WIDTH - 2), (conf.HEIGHT + 0.65) * tileSize)\n\n  // Render player\n  const playerImg = playerSprites[state.player.direction]\n  if (playerImg.complete) {\n    ctx.drawImage(\n      playerImg,\n      state.player.x * tileSize,\n      state.player.y * tileSize,\n      tileSize,\n      tileSize\n    )\n  }\n\n  // Render bombs\n  state.bombs.forEach(bomb => {\n    ctx.drawImage(img.bombImage, bomb.x * tileSize, bomb.y * tileSize, tileSize, tileSize)\n  })\n  // Render explosions\n  state.explosions.forEach(explosion => {\n    ctx.drawImage(img.explosionImage, explosion.x * tileSize, explosion.y * tileSize, tileSize, tileSize)\n    \n  })\n  // Render enemies\n  state.enemies.forEach(enemy => {\n    if (!enemy.alive) return\n    ctx.drawImage(img.enemyImage, enemy.x * tileSize, enemy.y * tileSize, tileSize, tileSize)\n  })\n  // Render PowerUps\n  state.powerups.forEach(p => {\n    if (p.type === 'bomb') ctx.drawImage(img.powerupBombImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n    else if (p.type === 'range') ctx.drawImage(img.powerupRangeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n    else if (p.type === 'freeze') ctx.drawImage(img.powerupFreezeImage, p.x * tileSize, p.y * tileSize, tileSize, tileSize)\n  })\n  if (state.gameOver) {\n    ctx.fillStyle = 'black'\n    ctx.font = '30px Arial'\n    ctx.fillText('Game Over', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2)\n  }\n  if (!state.gameStarted){\n    ctx.fillStyle = 'black'\n    ctx.font = '30px Arial'\n    ctx.fillText('Press any key to start', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2)\n    return\n  }\n  if (state.victory) {\n    ctx.fillStyle = 'gold'\n    ctx.font = '50px Arial'\n    ctx.fillText('YOU WIN', ctx.canvas.width / 2 - 70, ctx.canvas.height / 2)\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}