{"ast":null,"code":"var _jsxFileName = \"/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as conf from './conf';\nimport { useEffect, useRef } from 'react';\nimport { generateMap, isWalkable, TileType, explodeBomb, createInitialState } from './state';\nimport { render } from './renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(() => iterate(ctx));\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const initialState = createInitialState();\n  const ref = useRef();\n  const state = useRef(initialState);\n\n  const advanceToNextLevel = () => {\n    const nextLevel = state.current.level + 1;\n\n    if (nextLevel > state.current.maxLevel) {\n      state.current.gameOver = true;\n      return;\n    }\n\n    state.current.level = nextLevel;\n    state.current.victory = false;\n    state.current.levelTimer = conf.LEVELTIME + (nextLevel - 1) * conf.ADDITIONALTIME; // Re-generate the map\n\n    state.current.gameMap.tiles = generateMap(state.current.gameMap.width, state.current.gameMap.height); // Reset player\n\n    state.current.player.x = 1;\n    state.current.player.y = 1;\n    state.current.player.alive = true;\n    state.current.player.bombs = 1;\n    state.current.player.bombRange = 1; // Reset enemies (increase with level)\n\n    const enemyCount = conf.ENEMIES + (nextLevel - 1) * conf.ADDITIONALENEMIES;\n    const enemies = [];\n\n    while (enemies.length < enemyCount) {\n      const x = Math.floor(Math.random() * state.current.gameMap.width);\n      const y = Math.floor(Math.random() * state.current.gameMap.height);\n      const tile = state.current.gameMap.tiles[y][x];\n\n      if (tile === TileType.EMPTY && x >= 5 && y >= 5) {\n        enemies.push({\n          x,\n          y,\n          direction: 'right',\n          alive: true,\n          moveEvery: 0\n        });\n      }\n    }\n\n    state.current.enemies = enemies; // Reset powerups, bombs, explosions\n\n    state.current.bombs = [];\n    state.current.explosions = [];\n    state.current.powerups = [];\n  };\n\n  const resetGame = () => {\n    const newState = createInitialState();\n    Object.keys(newState).forEach(key => {\n      state.current[key] = newState[key];\n    });\n  };\n\n  const music = new Audio('music.mp3');\n  music.loop = true;\n  music.volume = 0.3;\n  music.autoplay = false;\n\n  const handleKeyDown = e => {\n    if (e.key.toLowerCase() === 'r') {\n      resetGame();\n      music.muted = state.current.muted;\n\n      if (!music.muted) {\n        music.play().catch(err => {\n          console.warn(\"Music play blocked on restart:\", err);\n        });\n      }\n    }\n\n    if (!state.current.gameStarted) {\n      state.current.gameStarted = true;\n\n      if (!state.current.muted) {\n        music.play().catch(err => {\n          console.warn(\"Music play blocked:\", err);\n        });\n      }\n\n      const enemyCount = conf.ENEMIES;\n      const enemies = [];\n\n      while (enemies.length < enemyCount) {\n        const x = Math.floor(Math.random() * state.current.gameMap.width);\n        const y = Math.floor(Math.random() * state.current.gameMap.height);\n        const tile = state.current.gameMap.tiles[y][x];\n\n        if (tile === TileType.EMPTY && x >= 5 && y >= 5) {\n          enemies.push({\n            x,\n            y,\n            ptxelX: x * conf.TILESIZE,\n            pixelY: y * conf.TILESIZE,\n            direction: 'up',\n            alive: true,\n            moveEvery: 0\n          });\n        }\n      }\n\n      state.current.enemies = enemies;\n      return;\n    }\n\n    if (state.current.victory) {\n      advanceToNextLevel();\n      return;\n    }\n\n    if (state.current.gameOver) return;\n    const {\n      x,\n      y\n    } = state.current.player;\n    let newX = x;\n    let newY = y;\n\n    switch (e.key) {\n      case 'r':\n        resetGame();\n        return;\n\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up';\n        newY--;\n        break;\n\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down';\n        newY++;\n        break;\n\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left';\n        newX--;\n        break;\n\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right';\n        newX++;\n        break;\n\n      case ' ':\n      case 'Enter':\n        {\n          const {\n            x,\n            y,\n            bombs\n          } = state.current.player;\n          const tile = state.current.gameMap.tiles[y][x];\n          const alreadyExists = state.current.bombs.some(b => b.x === x && b.y === y);\n\n          if (tile !== TileType.WALL && tile !== TileType.WATER && !alreadyExists && bombs > 0) {\n            state.current.bombs.push({\n              x,\n              y,\n              range: state.current.player.bombRange,\n              timer: conf.BOMBTIME,\n              owner: 'player'\n            });\n            state.current.player.bombs--;\n          }\n\n          break;\n        }\n\n      case 'p':\n        state.current.paused = !state.current.paused;\n        break;\n\n      case 'm':\n        state.current.muted = !state.current.muted;\n        music.muted = state.current.muted;\n        break;\n    }\n\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX];\n      const isBombThere = state.current.bombs.some(b => b.x === newX && b.y === newY);\n      const isStandingOnBomb = state.current.bombs.some(b => b.x === x && b.y === y);\n      if (isBombThere && !isStandingOnBomb) return;\n\n      if (isWalkable(tile)) {\n        state.current.player.x = newX;\n        state.current.player.y = newY;\n      }\n    }\n  };\n\n  const iterate = ctx => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    if (state.current.gameStarted && !state.current.gameOver && !state.current.victory) {\n      state.current.levelTimer--;\n\n      if (state.current.levelTimer <= 0) {\n        state.current.gameOver = true;\n      }\n    } // const explodedBombs = state.current.bombs.filter(bomb => bomb.timer <= 0)\n    // explodedBombs.forEach(bomb => {\n    //   explodeBomb(bomb, state.current)\n    // })\n    // state.current.bombs = state.current.bombs.filter(bomb => bomb.timer > 0)\n\n\n    state.current.bombs.forEach(bomb => bomb.timer--);\n    const toExplode = state.current.bombs.filter(b => b.timer <= 0);\n    state.current.bombs.forEach(b => {\n      if (b.timer > 0) b.timer--;\n      if (b.timer === 0) toExplode.push(b);\n    });\n    state.current.bombs = state.current.bombs.filter(b => !toExplode.includes(b));\n    toExplode.forEach(b => explodeBomb(b, state.current));\n    state.current.explosions = state.current.explosions.filter(e => {\n      e.duration--;\n      return e.duration > 0;\n    });\n    if (state.current.freezeTimer && state.current.freezeTimer > 0) state.current.freezeTimer--;\n    if (state.current.player.pixelX < state.current.player.x * conf.TILESIZE) state.current.player.pixelX += conf.PLAYERSPEED;\n    if (state.current.player.pixelX > state.current.player.x * conf.TILESIZE) state.current.player.pixelX -= conf.PLAYERSPEED;\n    if (state.current.player.pixelY < state.current.player.y * conf.TILESIZE) state.current.player.pixelY += conf.PLAYERSPEED;\n    if (state.current.player.pixelY > state.current.player.y * conf.TILESIZE) state.current.player.pixelY -= conf.PLAYERSPEED;\n\n    const tryMoveEnemy = enemy => {\n      if (!state.current.gameStarted) return;\n      if (state.current.freezeTimer && state.current.freezeTimer > 0) return;\n\n      if (enemy.moveEvery > 0) {\n        enemy.moveEvery--;\n        return;\n      }\n\n      const {\n        x,\n        y\n      } = enemy;\n      const directions = ['up', 'down', 'left', 'right'];\n      const preferredDirs = [enemy.direction, ...directions.filter(d => d !== enemy.direction)];\n      let moved = false;\n\n      for (const dir of preferredDirs) {\n        let newX = x;\n        let newY = y;\n\n        switch (dir) {\n          case 'up':\n            newY--;\n            break;\n\n          case 'down':\n            newY++;\n            break;\n\n          case 'left':\n            newX--;\n            break;\n\n          case 'right':\n            newX++;\n            break;\n        }\n\n        const isInBounds = newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height;\n        const tile = isInBounds ? state.current.gameMap.tiles[newY][newX] : TileType.WALL;\n        const isBlocked = !isWalkable(tile) || state.current.bombs.some(b => b.x === newX && b.y === newY);\n\n        if (!isBlocked) {\n          enemy.x = newX;\n          enemy.y = newY;\n          enemy.direction = dir;\n          moved = true;\n          break;\n        }\n      }\n\n      if (!moved && Math.random() < 0.2) {\n        const dirs = ['up', 'down', 'left', 'right'];\n        enemy.direction = dirs[Math.floor(Math.random() * dirs.length)];\n      }\n\n      enemy.moveEvery = 60;\n    };\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive) tryMoveEnemy(enemy);\n    });\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive && state.current.player.alive && state.current.player.x === enemy.x && state.current.player.y === enemy.y) {\n        state.current.player.alive = false;\n        state.current.gameOver = true;\n      }\n    });\n    state.current.powerups = state.current.powerups.map(p => ({ ...p,\n      duration: p.duration - 1\n    })).filter(p => p.duration > 0);\n    state.current.powerups = state.current.powerups.filter(p => {\n      if (p.x === state.current.player.x && p.y === state.current.player.y) {\n        if (p.type === 'bomb') state.current.player.bombs++;\n        if (p.type === 'range') state.current.player.bombRange++;\n        if (p.type === 'freeze') state.current.freezeTimer = 300;\n        state.current.score += 20;\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!state.current.victory && state.current.enemies.length > 0 && state.current.enemies.every(e => !e.alive)) {\n      state.current.victory = true;\n      state.current.score += Math.ceil(state.current.levelTimer / 60);\n      state.current.levelTimer = 0;\n    } // const loop = () => {\n    //   requestAnimationFrame(loop)\n    //   if(!state.current.paused) iterate(ctx)\n    //   render(ctx)(state.current)\n    // }\n    // Render the game state\n\n\n    if (!state.current.paused) {\n      requestAnimationFrame(() => iterate(ctx));\n    } else {\n      const resume = event => {\n        if (event.key.toLowerCase() === 'p') {\n          state.current.paused = false;\n          window.removeEventListener('keydown', resume);\n          requestAnimationFrame(() => iterate(ctx));\n        }\n      };\n\n      window.addEventListener('keydown', resume);\n    }\n\n    render(ctx)(state.current);\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current);\n      window.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"Gpm0P4FfDB25XYapIJctmdb7SaA=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx"],"names":["conf","useEffect","useRef","generateMap","isWalkable","TileType","explodeBomb","createInitialState","render","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","initialState","ref","state","advanceToNextLevel","nextLevel","current","level","maxLevel","gameOver","victory","levelTimer","LEVELTIME","ADDITIONALTIME","gameMap","tiles","player","x","y","alive","bombs","bombRange","enemyCount","ENEMIES","ADDITIONALENEMIES","enemies","length","Math","floor","random","tile","EMPTY","push","direction","moveEvery","explosions","powerups","resetGame","newState","Object","keys","forEach","key","music","Audio","loop","volume","autoplay","handleKeyDown","e","toLowerCase","muted","play","catch","err","console","warn","gameStarted","ptxelX","TILESIZE","pixelY","newX","newY","alreadyExists","some","b","WALL","WATER","range","timer","BOMBTIME","owner","paused","isBombThere","isStandingOnBomb","clearRect","bomb","toExplode","filter","includes","duration","freezeTimer","pixelX","PLAYERSPEED","tryMoveEnemy","enemy","directions","preferredDirs","d","moved","dir","isInBounds","isBlocked","dirs","map","p","type","score","every","ceil","resume","event","window","removeEventListener","addEventListener"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { useEffect, useRef } from 'react'\nimport { generateMap, isWalkable, State, TileType, explodeBomb, Enemy, createInitialState} from './state'\nimport { render } from './renderer'\nimport { Dirent } from 'fs'\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = createInitialState()\n\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n\n  const advanceToNextLevel = () => {\n    const nextLevel = state.current.level + 1\n  \n    if (nextLevel > state.current.maxLevel) {\n      state.current.gameOver = true\n      return\n    }\n  \n    state.current.level = nextLevel\n    state.current.victory = false\n    state.current.levelTimer = conf.LEVELTIME + (nextLevel - 1) * conf.ADDITIONALTIME\n  \n    // Re-generate the map\n    state.current.gameMap.tiles = generateMap(state.current.gameMap.width, state.current.gameMap.height)\n  \n    // Reset player\n    state.current.player.x = 1\n    state.current.player.y = 1\n    state.current.player.alive = true\n    state.current.player.bombs = 1\n    state.current.player.bombRange = 1\n  \n    // Reset enemies (increase with level)\n    const enemyCount = conf.ENEMIES + (nextLevel - 1) * conf.ADDITIONALENEMIES\n    const enemies = []\n    while(enemies.length < enemyCount) {\n      const x = Math.floor(Math.random() * state.current.gameMap.width)\n      const y = Math.floor(Math.random() * state.current.gameMap.height)\n      const tile = state.current.gameMap.tiles[y][x]\n\n      if (tile === TileType.EMPTY && x >= 5 && y >= 5) {\n        enemies.push({\n          x,\n          y,\n          direction: 'right' as 'right',\n          alive: true,\n          moveEvery: 0\n        })\n      }\n    }\n    \n    state.current.enemies = enemies as Enemy[]\n  \n    // Reset powerups, bombs, explosions\n    state.current.bombs = []\n    state.current.explosions = []\n    state.current.powerups = []\n  }\n  \n\n  const resetGame = () => {\n    const newState = createInitialState()\n    Object.keys(newState).forEach(key => {\n      (state.current as any)[key] = (newState as any)[key]\n    })\n  }\n\n  const music = new Audio('music.mp3')\n  music.loop = true\n  music.volume = 0.3\n  music.autoplay = false\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n\n    if (e.key.toLowerCase() === 'r') {\n      resetGame()\n      music.muted = state.current.muted\n      if (!music.muted) {\n        music.play().catch((err) => {\n          console.warn(\"Music play blocked on restart:\", err)\n        })\n      }\n    }\n\n    if (!state.current.gameStarted) {\n      state.current.gameStarted = true\n\n      if (!state.current.muted) {\n        music.play().catch((err) => {\n          console.warn(\"Music play blocked:\", err)\n        })\n      }\n\n      const enemyCount = conf.ENEMIES\n      const enemies = []\n\n      while(enemies.length < enemyCount) {\n        const x = Math.floor(Math.random() * state.current.gameMap.width)\n        const y = Math.floor(Math.random() * state.current.gameMap.height)\n        const tile = state.current.gameMap.tiles[y][x]\n  \n        if (tile === TileType.EMPTY && x >= 5 && y >= 5) {\n          enemies.push({\n            x,\n            y,\n            ptxelX: x * conf.TILESIZE,\n            pixelY: y * conf.TILESIZE,\n            direction: 'up' as 'up',\n            alive: true,\n            moveEvery: 0\n          })\n        }\n      }\n\n      state.current.enemies = enemies\n      return\n    }\n\n    if (state.current.victory) {\n      advanceToNextLevel()\n      return\n    }\n\n    if (state.current.gameOver) return\n\n    const {x, y} = state.current.player\n    let newX = x\n    let newY = y\n    switch (e.key) {\n      case 'r':\n        resetGame()\n        return\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up'\n        newY--\n        break\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down'\n        newY++\n        break\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left'\n        newX--\n        break\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right'\n        newX++\n        break\n      case ' ':\n      case 'Enter': {\n        const {x, y, bombs} = state.current.player\n        const tile = state.current.gameMap.tiles[y][x]\n        const alreadyExists = state.current.bombs.some(b => b.x === x && b.y === y)\n        if (tile !== TileType.WALL && tile !== TileType.WATER && !alreadyExists && bombs > 0) {\n          state.current.bombs.push({\n            x,\n            y,\n            range: state.current.player.bombRange,\n            timer: conf.BOMBTIME,\n            owner: 'player',\n          })\n          state.current.player.bombs--\n        }\n        break\n      }\n      case 'p':\n        state.current.paused = !state.current.paused\n        break\n      case 'm':\n        state.current.muted = !state.current.muted\n        music.muted = state.current.muted\n        break\n    }\n\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX]\n\n      const isBombThere = state.current.bombs.some(b => b.x === newX && b.y === newY)\n      const isStandingOnBomb = state.current.bombs.some(b => b.x === x && b.y === y)\n      if (isBombThere && !isStandingOnBomb) return\n      if (isWalkable(tile)) {\n        state.current.player.x = newX\n        state.current.player.y = newY\n      }\n    }\n  }\n\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n\n    if (state.current.gameStarted && !state.current.gameOver && !state.current.victory){\n      state.current.levelTimer--\n      if (state.current.levelTimer <= 0){\n        state.current.gameOver = true\n      }\n    }\n\n    // const explodedBombs = state.current.bombs.filter(bomb => bomb.timer <= 0)\n    // explodedBombs.forEach(bomb => {\n    //   explodeBomb(bomb, state.current)\n    // })\n\n    // state.current.bombs = state.current.bombs.filter(bomb => bomb.timer > 0)\n\n    state.current.bombs.forEach(bomb => bomb.timer--)\n    const toExplode = state.current.bombs.filter(b => b.timer <= 0)\n\n    state.current.bombs.forEach(b => {\n      if (b.timer > 0) b.timer--\n      if (b.timer === 0) toExplode.push(b)\n    })\n\n    state.current.bombs = state.current.bombs.filter(b => !toExplode.includes(b))\n    toExplode.forEach(b => explodeBomb(b,state.current))\n\n    state.current.explosions = state.current.explosions.filter(e => {\n      e.duration--\n      return e.duration > 0\n    })\n\n    if (state.current.freezeTimer && state.current.freezeTimer > 0) state.current.freezeTimer--\n\n    if (state.current.player.pixelX < state.current.player.x * conf.TILESIZE) state.current.player.pixelX += conf.PLAYERSPEED\n    if (state.current.player.pixelX > state.current.player.x * conf.TILESIZE) state.current.player.pixelX -= conf.PLAYERSPEED\n    if (state.current.player.pixelY < state.current.player.y * conf.TILESIZE) state.current.player.pixelY += conf.PLAYERSPEED\n    if (state.current.player.pixelY > state.current.player.y * conf.TILESIZE) state.current.player.pixelY -= conf.PLAYERSPEED\n\n    const tryMoveEnemy = (enemy : Enemy) => {\n      if (!state.current.gameStarted) return\n      if (state.current.freezeTimer && state.current.freezeTimer > 0) return\n\n      if (enemy.moveEvery > 0){\n        enemy.moveEvery--\n        return\n      }\n\n      const {x, y} = enemy\n      const directions: Enemy['direction'][] = ['up', 'down', 'left', 'right']\n\n      const preferredDirs = [enemy.direction, ...directions.filter(d => d !== enemy.direction)]\n\n      let moved = false\n\n      for (const dir of preferredDirs) {\n        let newX = x\n        let newY = y\n        switch (dir) {\n          case 'up':\n            newY--\n            break\n          case 'down':\n            newY++\n            break\n          case 'left':\n            newX--\n            break\n          case 'right':\n            newX++\n            break\n        }\n\n        const isInBounds = newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height\n        const tile = isInBounds ? state.current.gameMap.tiles[newY][newX] : TileType.WALL\n        const isBlocked = !isWalkable(tile) || state.current.bombs.some(b => b.x === newX && b.y === newY)\n\n        if (!isBlocked) {\n          enemy.x = newX\n          enemy.y = newY\n          enemy.direction = dir\n          moved = true\n          break\n        }\n      }\n\n      if (!moved && Math.random() < 0.2){\n        const dirs: Enemy['direction'][] = ['up', 'down', 'left', 'right']\n        enemy.direction = dirs[Math.floor(Math.random() * dirs.length)]\n      }\n      enemy.moveEvery = 60\n    }\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive) tryMoveEnemy(enemy)\n    })\n\n    state.current.enemies.forEach(enemy => {\n      if (enemy.alive && state.current.player.alive && state.current.player.x === enemy.x && state.current.player.y === enemy.y) {\n        state.current.player.alive = false\n        state.current.gameOver = true\n      }\n    })\n\n    state.current.powerups = state.current.powerups.map(p => ({ ...p, duration: p.duration! - 1 })).filter(p => p.duration! > 0)\n    \n    state.current.powerups = state.current.powerups.filter(p => {\n      if (p.x === state.current.player.x && p.y === state.current.player.y) {\n        if (p.type === 'bomb') state.current.player.bombs++\n        if (p.type === 'range') state.current.player.bombRange++\n        if (p.type === 'freeze') state.current.freezeTimer = 300\n\n        state.current.score += 20\n        return false\n      }\n      return true\n    })\n    \n\n    if (!state.current.victory && state.current.enemies.length > 0 && state.current.enemies.every(e => !e.alive)) {\n      state.current.victory = true\n      state.current.score += Math.ceil(state.current.levelTimer / 60)\n      state.current.levelTimer = 0\n    }\n\n    // const loop = () => {\n    //   requestAnimationFrame(loop)\n    //   if(!state.current.paused) iterate(ctx)\n    //   render(ctx)(state.current)\n      \n    // }\n\n    // Render the game state\n    if (!state.current.paused){\n      requestAnimationFrame(() => iterate(ctx))\n    } \n    else {\n      const resume = (event : KeyboardEvent) => {\n        if (event.key.toLowerCase() === 'p') {\n          state.current.paused = false\n          window.removeEventListener('keydown', resume)\n          requestAnimationFrame(() => iterate(ctx))\n        }\n      }\n      window.addEventListener('keydown', resume)\n    }\n    render(ctx)(state.current)\n  }\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current)\n      window.addEventListener('keydown', handleKeyDown)\n    }\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}