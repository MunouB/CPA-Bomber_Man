{"ast":null,"code":"var _jsxFileName = \"/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as conf from './conf';\nimport { useEffect, useRef } from 'react';\nimport { generateMap, isWalkable } from './state';\nimport { render } from './renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initCanvas = iterate => canvas => {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n  requestAnimationFrame(() => iterate(ctx));\n};\n\nconst Canvas = _ref => {\n  _s();\n\n  let {\n    height,\n    width\n  } = _ref;\n  const initialState = {\n    player: {\n      x: 1,\n      y: 1,\n      alive: true,\n      bombs: 1,\n      bombRange: 2,\n      direction: 'right'\n    },\n    bombs: [],\n    explosions: [],\n    enemies: [],\n    gameMap: {\n      width: conf.WIDTH,\n      height: conf.HEIGHT,\n      tiles: generateMap(13, 11)\n    },\n    gameOver: false,\n    victory: false\n  };\n  const ref = useRef();\n  const state = useRef(initialState);\n\n  const handleKeyDown = e => {\n    const {\n      x,\n      y\n    } = state.current.player;\n    let newX = x;\n    let newY = y;\n\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up';\n        newY--;\n        break;\n\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down';\n        newY++;\n        break;\n\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left';\n        newX--;\n        break;\n\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right';\n        newX++;\n        break;\n    }\n\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX];\n\n      if (isWalkable(tile)) {\n        state.current.player.x = newX;\n        state.current.player.y = newY;\n      }\n    }\n  };\n\n  const iterate = ctx => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Render the game state\n\n    render(ctx)(state.current);\n    requestAnimationFrame(() => iterate(ctx));\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current);\n    }\n\n    return () => {};\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    height,\n    width,\n    ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"Gpm0P4FfDB25XYapIJctmdb7SaA=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/home/munou/stl/year_2/2/cpa/projet_de_0/canvas-master/src/components/canvas/index.tsx"],"names":["conf","useEffect","useRef","generateMap","isWalkable","render","initCanvas","iterate","canvas","ctx","getContext","requestAnimationFrame","Canvas","height","width","initialState","player","x","y","alive","bombs","bombRange","direction","explosions","enemies","gameMap","WIDTH","HEIGHT","tiles","gameOver","victory","ref","state","handleKeyDown","e","current","newX","newY","key","tile","clearRect"],"mappings":"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","sourcesContent":["import * as conf from './conf'\nimport { useEffect, useRef } from 'react'\nimport { generateMap, isWalkable, State } from './state'\nimport { render } from './renderer'\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = {\n    player: {\n      x: 1,\n      y: 1,\n      alive: true,\n      bombs: 1,\n      bombRange: 2,\n      direction: 'right'\n    },\n    bombs: [],\n    explosions: [],\n    enemies: [],\n    gameMap: {\n      width: conf.WIDTH,\n      height: conf.HEIGHT,\n      tiles: generateMap(13, 11),\n    },\n    gameOver: false,\n    victory: false\n  }\n\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    const {x, y} = state.current.player\n    let newX = x\n    let newY = y\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'z':\n        state.current.player.direction = 'up'\n        newY--\n        break\n      case 'ArrowDown':\n      case 's':\n        state.current.player.direction = 'down'\n        newY++\n        break\n      case 'ArrowLeft':\n      case 'q':\n        state.current.player.direction = 'left'\n        newX--\n        break\n      case 'ArrowRight':\n      case 'd':\n        state.current.player.direction = 'right'\n        newX++\n        break\n    }\n\n    if (newX >= 0 && newX < state.current.gameMap.width && newY >= 0 && newY < state.current.gameMap.height) {\n      const tile = state.current.gameMap.tiles[newY][newX]\n      if (isWalkable(tile)) {\n        state.current.player.x = newX\n        state.current.player.y = newY\n      }\n    }\n  }\n\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    // Render the game state\n    render(ctx)(state.current)\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\n  useEffect(() => {\n    if (ref.current) {\n      initCanvas(iterate)(ref.current)\n    }\n    return () => {}\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}