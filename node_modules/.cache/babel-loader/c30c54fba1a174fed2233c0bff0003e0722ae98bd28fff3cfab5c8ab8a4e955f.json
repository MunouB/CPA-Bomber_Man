{"ast":null,"code":"export {};","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import * as conf from './conf'\n// type Coord = { x: number; y: number; dx: number; dy: number }\n// type Ball = { coord: Coord; life: number; invincible?: number }\n// type Size = { height: number; width: number }\n// export type State = {\n//   pos: Array<Ball>\n//   size: Size\n//   endOfGame: boolean\n// }\n\n// const dist2 = (o1: Coord, o2: Coord) =>\n//   Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\n// const iterate = (bound: Size) => (ball: Ball) => {\n//   const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible\n//   const coord = ball.coord\n//   const dx =\n//     (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n//       ? -coord.dx\n//       : coord.dx) * conf.FRICTION\n//   const dy =\n//     (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n//       ? -coord.dy\n//       : coord.dy) * conf.FRICTION\n//   if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE)\n//     return { ...ball, invincible, coord: { ...coord, dx: 0, dy: 0 } }\n//   return {\n//     ...ball,\n//     invincible,\n//     coord: {\n//       x: coord.x + dx,\n//       y: coord.y + dy,\n//       dx,\n//       dy,\n//     },\n//   }\n// }\n\n// export const click =\n//   (state: State) =>\n//   (event: PointerEvent): State => {\n//     const { offsetX, offsetY } = event\n//     const target = state.pos.find(\n//       (p) =>\n//         dist2(p.coord, { x: offsetX, y: offsetY, dx: 0, dy: 0 }) <\n//         Math.pow(conf.RADIUS, 2) + 100\n//     )\n//     if (target) {\n//       target.coord.dx += Math.random() * 10\n//       target.coord.dy += Math.random() * 10\n//     }\n//     return state\n//   }\n\n// const collide = (o1: Coord, o2: Coord) =>\n//   dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\n// const collideBoing = (p1: Coord, p2: Coord) => {\n//   const nx = (p2.x - p1.x) / (2 * conf.RADIUS)\n//   const ny = (p2.y - p1.y) / (2 * conf.RADIUS)\n//   const gx = -ny\n//   const gy = nx\n\n//   const v1g = gx * p1.dx + gy * p1.dy\n//   const v2n = nx * p2.dx + ny * p2.dy\n//   const v2g = gx * p2.dx + gy * p2.dy\n//   const v1n = nx * p1.dx + ny * p1.dy\n//   p1.dx = nx * v2n + gx * v1g\n//   p1.dy = ny * v2n + gy * v1g\n//   p2.dx = nx * v1n + gx * v2g\n//   p2.dy = ny * v1n + gy * v2g\n//   p1.x += p1.dx\n//   p1.y += p1.dy\n//   p2.x += p2.dx\n//   p2.y += p2.dy\n// }\n\n// export const step = (state: State) => {\n//   state.pos.map((p1, i, arr) => {\n//     arr.slice(i + 1).map((p2) => {\n//       if (collide(p1.coord, p2.coord)) {\n//         if (!p1.invincible) {\n//           p1.life--\n//           p1.invincible = 20\n//         }\n//         if (!p2.invincible) {\n//           p2.life--\n//           p2.invincible = 20\n//         }\n//         collideBoing(p1.coord, p2.coord)\n//       }\n//     })\n//   })\n//   return {\n//     ...state,\n//     pos: state.pos.map(iterate(state.size)).filter((p) => p.life > 0),\n//   }\n// }\n\n// export const mouseMove =\n//   (state: State) =>\n//   (event: PointerEvent): State => {\n//     return state\n//   }\n\n// export const endOfGame = (state: State): boolean => true\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}